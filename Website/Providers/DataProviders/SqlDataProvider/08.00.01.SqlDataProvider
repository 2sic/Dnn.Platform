/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/



/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

/* Create HasBeenPublished field */
IF NOT EXISTS
(SELECT * FROM sys.all_columns c INNER JOIN sys.tables t
	ON c.object_id = t.object_id AND t.name = '{objectQualifier}Files'
	WHERE c.name = 'HasBeenPublished')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}Files]
		ADD HasBeenPublished bit NULL	
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD CONSTRAINT
		DF_{objectQualifier}Files_HasBeenPublished DEFAULT 1 FOR HasBeenPublished	
END

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetHasBeenPublished]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetHasBeenPublished
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetHasBeenPublished] 
	@FileId					int
AS
BEGIN

	SELECT [HasBeenPublished]
	FROM {databaseOwner}[{objectQualifier}Files] f
	WHERE f.FileId = @FileId

END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}SetHasBeenPublished]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}SetHasBeenPublished
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetHasBeenPublished] 
	@FileId					int,
	@HasBeenPublished		bit
AS
BEGIN

	-- Change Files.HasBeenPublished to the passed value
	UPDATE {databaseOwner}[{objectQualifier}Files]
	SET	 [HasBeenPublished] = @HasBeenPublished
	FROM {databaseOwner}[{objectQualifier}Files] f
	WHERE f.FileId = @FileId
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteFileVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteFileVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFileVersion] 
	@FileId int,
	@Version int
AS
BEGIN
	DECLARE @PublishedVersion int

	-- Check there is at least one version
	IF NOT EXISTS(SELECT FileID FROM {objectQualifier}FileVersions WHERE FileId = @FileId)
	BEGIN
		SELECT 1 -- We need to return 1 in order to allow initial version
		RETURN
	END
		
	SELECT @PublishedVersion = PublishedVersion
	FROM {databaseOwner}{objectQualifier}Files
	WHERE FileId = @FileId

	IF @PublishedVersion = @Version 
	BEGIN
		-- Get the previous version
		SELECT @PublishedVersion = MAX(Version)
		FROM {databaseOwner}{objectQualifier}FileVersions 
		WHERE FileId = @FileId
			AND Version < @Version

		-- If there is no previous version, get the min exsisting version
		IF @PublishedVersion IS NULL 
			SELECT @PublishedVersion = MIN(Version)
			FROM {databaseOwner}{objectQualifier}FileVersions 
			WHERE FileId = @FileId

		-- Update the published version
		IF @PublishedVersion IS NOT NULL 
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Files
			SET [PublishedVersion] = @PublishedVersion,
				[Extension] = v.[Extension],
				[Size] = v.[Size],
				[Width] = v.Width,		
				[Height] = v.Height,
				[ContentType] = v.ContentType,
				[Content] = v.Content,
				[LastModifiedByUserID] = v.LastModifiedByUserID,
				[LastModifiedOnDate] = v.LastModifiedOnDate,
				[SHA1Hash] = v.SHA1Hash
			FROM {databaseOwner}{objectQualifier}files AS f
				INNER JOIN {databaseOwner}{objectQualifier}FileVersions AS v
				ON ( f.FileId = v.FileId AND v.Version = @PublishedVersion)		
			WHERE f.FileId = @FileId

			DELETE FROM {databaseOwner}{objectQualifier}FileVersions
			WHERE FileId = @FileId 
			AND Version = @PublishedVersion
		END
	END

	DELETE FROM {databaseOwner}{objectQualifier}FileVersions
	WHERE FileId = @FileId 
	  AND Version = @Version

	SELECT @PublishedVersion
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_Files]') AND type in (N'V'))
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Files]
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Files]
AS
	SELECT	fi.FileId, 
			fi.PortalId, 
			fi.FileName, 
			fi.Extension, 
			fi.Size, 
			fi.Width, 
			fi.Height, 
			fi.ContentType, 
			fi.FolderID, 
			fi.[Content], 
			fi.CreatedByUserID, 
			fi.CreatedOnDate, 
			fi.LastModifiedByUserID, 
			fi.LastModifiedOnDate, 
			fi.UniqueId, 
			fi.VersionGuid, 
			fi.SHA1Hash, 
			fi.LastModificationTime, 
			fi.Title, 
			fi.StartDate, 
			fi.EnablePublishPeriod, 
			fi.EndDate, 
			fi.ContentItemID, 
			fi.PublishedVersion, 
			fo.FolderPath AS Folder,
			fo.IsCached,
			fo.FolderMappingID,
			fo.StorageLocation,
			fi.HasBeenPublished
	FROM         {databaseOwner}[{objectQualifier}Files] AS fi 
	INNER JOIN {databaseOwner}[{objectQualifier}Folders] AS fo 
		ON fi.FolderID = fo.FolderID
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_PublishedFiles]') AND type in (N'V'))
	DROP VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
AS
	SELECT     
	   fi.[FileId]
      ,fi.[PortalId]
      ,fi.[FileName]
      ,fi.[Extension]
      ,fi.[Size]
      ,fi.[Width]
      ,fi.[Height]
      ,fi.[ContentType]
      ,fi.[FolderID]
      ,fi.[Content]
      ,fi.[CreatedByUserID]
      ,fi.[CreatedOnDate]
      ,fi.[LastModifiedByUserID]
      ,fi.[LastModifiedOnDate]
      ,fi.[UniqueId]
      ,fi.[VersionGuid]
      ,fi.[SHA1Hash]
      ,fi.[LastModificationTime]
      ,fi.[Title]
      ,fi.[StartDate]
      ,fi.[EnablePublishPeriod]
      ,fi.[EndDate]
      ,fi.[ContentItemID]
      ,fi.[PublishedVersion]
	  ,fi.[Folder]
	  ,fi.[IsCached]
	  ,fi.[StorageLocation]
	  ,fi.[FolderMappingID]
	  ,fi.[HasBeenPublished]
	FROM       {databaseOwner}[{objectQualifier}vw_Files] fi
	  WHERE ([EnablePublishPeriod] = 0 AND [HasBeenPublished] = 1)
		 OR ([StartDate] <= GETDATE()
			AND ([EndDate] IS NULL OR GETDATE() <= [EndDate]) AND [HasBeenPublished] = 1)
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SetPublishedVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SetPublishedVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetPublishedVersion] 
	@FileId					int,
	@NewPublishedVersion	int
AS
BEGIN

	-- Insert a new record in the FileVersions table for the old published version
	INSERT {databaseOwner}[{objectQualifier}FileVersions]
				([FileId]
				,[Version]
				,[FileName]
				,[Extension]
				,[Size]
				,[Width]
				,[Height]
				,[ContentType]
				,[Content]
				,[CreatedByUserID]
				,[CreatedOnDate]
				,[LastModifiedByUserID]
				,[LastModifiedOnDate]
				,[SHA1Hash])
	SELECT		[FileId]
				,[PublishedVersion]  [Version]				
				,CONVERT(nvarchar, [FileId]) + '_' + CONVERT(nvarchar, [PublishedVersion]) +'.v.resources' 
				,[Extension]
				,[Size]
				,[Width]
				,[Height]
				,[ContentType]
				,[Content]
				,[CreatedByUserID]
				,[CreatedOnDate]
				,[LastModifiedByUserID]
				,[LastModifiedOnDate]
				,[SHA1Hash]					
	FROM {objectQualifier}Files
	WHERE FileId = @FileId

	-- Change Files.PublishedVersion to the new version number
	UPDATE {databaseOwner}[{objectQualifier}Files]
	SET	 [PublishedVersion] = @NewPublishedVersion		
		,[Extension] =v.[Extension]
		,[Size] = v.[Size]
		,[Width] = v.[Width]
		,[Height] = v.[Height]
		,[ContentType] = v.[ContentType]
		,[Content] = v.[Content]
		,[CreatedByUserID] = v.[CreatedByUserID]
		,[CreatedOnDate] = v.[CreatedOnDate]
		,[LastModifiedByUserID] = v.[LastModifiedByUserID]
		,[LastModifiedOnDate] = v.[LastModifiedOnDate]
		,[SHA1Hash] = v.[SHA1Hash]
		,[HasBeenPublished] = 1
	FROM {databaseOwner}[{objectQualifier}Files] f
		JOIN {databaseOwner}[{objectQualifier}FileVersions] v ON f.FileId = v.FileId
	WHERE f.FileId = @FileId
		AND v.Version = @NewPublishedVersion

    -- Delete the FileVersions entry of the version being published
	DELETE {databaseOwner}[{objectQualifier}FileVersions]
	WHERE FileId = @FileId AND Version = @NewPublishedVersion
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFile]
	@FileName nvarchar(246),
	@FolderID int,
	@RetrieveUnpublishedFiles bit = 0
AS
BEGIN
	IF @RetrieveUnpublishedFiles = 0 BEGIN
		SELECT FileId,
			   PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   FolderID,
			   Folder,
			   StorageLocation,
			   IsCached,
			   UniqueId,
			   VersionGuid,	   
			   SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   CreatedByUserID,
			   CreatedOnDate,
			   LastModifiedByUserID,
			   LastModifiedOnDate,
			   ContentItemID,
			   PublishedVersion,
			   HasBeenPublished
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] 			
		WHERE [FileName] = @FileName AND FolderID = @FolderID
	END
	ELSE BEGIN
		SELECT FileId,
			   PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   FolderID,
			   Folder,
			   StorageLocation,
			   IsCached,
			   UniqueId,
			   VersionGuid,	   
			   SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   CreatedByUserID,
			   CreatedOnDate,
			   LastModifiedByUserID,
			   LastModifiedOnDate,
			   ContentItemID,
			   PublishedVersion,
			   HasBeenPublished
		FROM {databaseOwner}[{objectQualifier}vw_Files]
		WHERE [FileName] = @FileName AND FolderID = @FolderID
	END
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileById]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFileById]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileById]
	@FileId int	,
	@RetrieveUnpublishedFiles bit = 0
AS
BEGIN
	IF @RetrieveUnpublishedFiles = 0 BEGIN
		SELECT FileId,
			   PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   FolderID,
			   Folder,
			   StorageLocation,
			   IsCached,
			   UniqueId,
			   VersionGuid,
			   SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   CreatedByUserID,
			   CreatedOnDate,
			   LastModifiedByUserID,
			   LastModifiedOnDate,
			   PublishedVersion,
			   ContentItemID,
			   HasBeenPublished
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles]
		WHERE FileId = @FileId
	END
	ELSE BEGIN
		SELECT FileId,
			   PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   FolderID,
			   Folder,
			   StorageLocation,
			   IsCached,
			   [UniqueId],
			   [VersionGuid],
			   SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   CreatedByUserID,
			   CreatedOnDate,
			   LastModifiedByUserID,
			   LastModifiedOnDate,
			   PublishedVersion,
			   ContentItemID,
			   HasBeenPublished
		FROM {databaseOwner}[{objectQualifier}vw_Files] 
		WHERE FileId = @FileId
	END	
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFiles]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
    @FolderID Int,                      -- not null!
    @RetrieveUnpublishedFiles Bit = 0   -- include files, hidden by status or date?
AS
	IF @RetrieveUnpublishedFiles = 0 
	BEGIN
		SELECT
			F.FileId,
			F.PortalId,
			F.[FileName],
			F.Extension,
			F.[Size],
			F.Width,
			F.Height,
			F.ContentType,
			F.FolderID,
			F.Folder,
			F.StorageLocation,
			F.IsCached,
			F.FolderMappingID,
			F.UniqueId,
			F.VersionGuid,
			F.SHA1Hash,
			F.LastModificationTime,
			F.Title,
			F.EnablePublishPeriod,
			F.StartDate,
			F.EndDate,
			F.CreatedByUserID,
			F.CreatedOnDate,
			F.LastModifiedByUserID,
			F.LastModifiedOnDate,
			F.PublishedVersion,
			F.ContentItemID,
			F.HasBeenPublished
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] F			
		WHERE F.FolderID = @FolderID
		ORDER BY [FolderID], [FileName]
	END
	ELSE BEGIN
		SELECT
			F.FileId,
			F.PortalId,
			F.[FileName],
			F.Extension,
			F.[Size],
			F.Width,
			F.Height,
			F.ContentType,
			F.FolderID,
			F.Folder,
			F.StorageLocation,
			F.IsCached,
			F.FolderMappingID,
			F.UniqueId,
			F.VersionGuid,
			F.SHA1Hash,
			F.LastModificationTime,
			F.Title,
			F.EnablePublishPeriod,
			F.StartDate,
			F.EndDate,
			F.CreatedByUserID,
			F.CreatedOnDate,
			F.LastModifiedByUserID,
			F.LastModifiedOnDate,
			F.PublishedVersion,
			F.ContentItemID,
			F.HasBeenPublished
		FROM {databaseOwner}[{objectQualifier}vw_Files] F			
		WHERE F.FolderID = @FolderID
		ORDER BY [FolderID], [FileName]
	END
GO
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/