/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/


DELETE {databaseOwner}{objectQualifier}Folders
FROM {databaseOwner}{objectQualifier}Folders f
	LEFT JOIN {databaseOwner}{objectQualifier}FolderMappings fm ON F.FolderMappingID = fm.FolderMappingID
WHERE fm.FolderMappingID IS NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Folders 
ADD CONSTRAINT FK_Folders_FolderMappings 
	FOREIGN KEY (FolderMappingID) 
		REFERENCES {databaseOwner}{objectQualifier}FolderMappings (FolderMappingID)
GO

/*** Fix bug DNN-4064: Filter the user's portal id to limit users in current portal. ***/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch] 
(
    @PortalID int,                          -- portal                
    @UserId int,                            -- for determining correct visibility permissions
    @FilterUserId int,                      -- for filtering relationships on    
    @FilterRoleId int,                      -- for filtering by roles
    @RelationshipTypeId int,                -- for filtering by relationships
    @IsAdmin bit,                           -- determines visibility
    @PageSize int,                          -- page size
    @PageIndex int,                         -- 0 based page index
    @SortBy nvarchar(100),                  -- sort field
    @SortAscending bit,                     -- sort flag indicating whether sort is asc or desc
    @PropertyNames nvarchar(max),           -- list of property names to filter
    @PropertyValues nvarchar(max)           -- list of property values to filter
)
AS
    -- Setup Top XX
    DECLARE @topSql nvarchar(20) SET @topSql = ''
    IF @PageSize > -1 BEGIN SET @topSql = ' TOP ' + CONVERT(nvarchar(20), @PageSize) END
                
    -- Setup Specific Page
    DECLARE @minRowNumberSql nvarchar(20) SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))
    -- Setup Pivot Field List
    DECLARE @pivotSql nvarchar(max) SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

    -- Get User specific columns
    DECLARE @UserColumns TABLE(ColumnName NVARCHAR(100))
    INSERT INTO @UserColumns SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}vw_Users'

    -- Lists Filters names and values into tables
    DECLARE @PropertyNamesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
    DECLARE @PropertyValuesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
    INSERT INTO @PropertyNamesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)                      
    INSERT INTO @PropertyValuesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyValues)
                
    -- Gets filters that are on the User rather than Profile Properties
    DECLARE @UserFiltersTable TABLE (RowNumber Int, RowValue NVARCHAR(MAX))
    INSERT INTO @UserFiltersTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',',@PropertyNames) WHERE RowValue IN (SELECT * FROM @UserColumns)


    DECLARE @sql nvarchar(max) SET @sql = ''
    DECLARE @filterSql nvarchar(max)SET @filterSql = ''

    -- ///////////////////////////////////////////////////
    -- FILTERING by PROFILE PROPERTY or USER PROPERTY
    -- ///////////////////////////////////////////////////
    --IF @PropertyNames IS NOT NULL AND @PropertyNames <> ''
    IF ((SELECT COUNT(*) FROM @PropertyNamesTable) > 0) AND ((SELECT COUNT(*) FROM @PropertyValuesTable)> 0) 
	    BEGIN
            DECLARE @propertyFilter nvarchar(max)
            DECLARE @userFilter nvarchar(max)
            DECLARE @userFilterJoin nvarchar(max) SET @userFilterJoin = ''
            DECLARE @profilePropertyCount INT
            DECLARE @userFilterCount INT
            DECLARE @propertyAndUserFilter nvarchar(10) SET @propertyAndUserFilter = ''
            DECLARE @groupBy NVARCHAR(300)

            -- Filters on Profile Properties    
            ;WITH CTE_PropertyNames(RowNumber, RowValue) AS
            (              SELECT * FROM @PropertyNamesTable
                            WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns)),
            CTE_PropertyValues(RowNumber, RowValue) AS
            (              SELECT * FROM @PropertyValuesTable
                            WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns))

            SELECT @propertyFilter = COALESCE(@propertyFilter + ' OR ' , ' ') 
                                        + ' (PropertyName=''' + N.RowValue 
                                        + ''' AND ((PropertyValue LIKE ''' + V.RowValue +'%'') OR (PropertyValue LIKE ''% ' + V.RowValue +'%'')))'
            FROM CTE_PropertyNames AS N INNER JOIN CTE_PropertyValues AS V ON N.RowNumber = V.RowNumber
                                
            -- Filters on User Property                           
            SELECT @userFilter = COALESCE(@userFilter + ' AND ', ' ')  
										+ ' ((u.' + N.RowValue + ' LIKE ''' + V.RowValue +'%'') OR (u.' + N.RowValue + ' LIKE ''% ' + V.RowValue +'%'')) '
            FROM @UserFiltersTable AS N  INNER JOIN @PropertyValuesTable AS V ON N.RowNumber = V.RowNumber
                                
            SELECT @userFilterCount = COUNT(*) FROM @UserFiltersTable
            IF @userFilterCount > 0 BEGIN SET @userFilterJoin = ' INNER JOIN {objectQualifier}vw_Users u ON u.UserId = p.UserId ' END

            -- Determining the Group By Clause -- dependant on types of filters used
            SELECT @profilePropertyCount = COUNT(*) FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)
            WHERE RowValue IN (SELECT PropertyName FROM {objectQualifier}ProfilePropertyDefinition WHERE PortalID = @PortalId)
            AND RowValue NOT IN (SELECT ColumnName FROM @UserColumns)

            IF @profilePropertyCount > 0
                BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) = ' + CONVERT(nvarchar(20),@profilePropertyCount ) END
            ELSE
                BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) > 0 '     END

            IF ( @profilePropertyCount > 0 AND @userFilterCount > 0)
            BEGIN SET @propertyAndUserFilter = ' AND ' END

            -- CREATE FINAL FILTER
            SET @filterSql = ' DECLARE @MatchingUsers TABLE (UserID INT, Occurrances INT) INSERT INTO @MatchingUsers SELECT p.UserID, COUNT(*) AS occurances ' 
                                        + ' FROM {databaseOwner}{objectQualifier}vw_profile p ' + @userFilterJoin
                                        + ' WHERE ' + COALESCE(' ( ' + @propertyFilter + ') ', ' ') + @propertyAndUserFilter + COALESCE(@userFilter, ' ') 
										+ ' AND ((Visibility = 0) OR (Visibility = 1 AND ' + CONVERT(nvarchar(20), @UserId) + ' > 0) OR (Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1))' 
                                        + @groupBy
		END

        -- ///////////////////////////////////////////////////      
        -- SETUP ROLE AND RELATIONSHIP FILTERS
        -- ///////////////////////////////////////////////////
        DECLARE @roleAndRelationshipFilter nvarchar(1000)
        DECLARE @roleFilter nvarchar(100) SET @roleFilter = ''
        DECLARE @relationshipFilter nvarchar(1000) SET @relationshipFilter = ''
        DECLARE @roleAndRelationshipFlag bit SET @roleAndRelationshipFlag  = 0
        DECLARE @RoleAndRelationshipSelect nvarchar(100) SET @RoleAndRelationshipSelect = ''
                                
        -- Filter by Role
        IF @FilterRoleId <> -1 
            BEGIN
                SET @roleAndRelationshipFlag = 1
                SET @roleFilter = ' JOIN {objectQualifier}UserRoles UR ON U.UserID = UR.UserID AND UR.RoleID = ' + CONVERT(nvarchar(20), @FilterRoleId)
            END

        -- Filter by Relationship
        IF @RelationshipTypeId <> -1  
            BEGIN
                SET @roleAndRelationshipFlag = 1
                SET @relationshipFilter = ' JOIN {objectQualifier}Relationships REL ON REL.PortalID = ' + CONVERT(nvarchar(20), @PortalID)
                                            + ' AND RelationshipTypeID = ' + CONVERT(nvarchar(20), @RelationshipTypeId) 
                                            + ' JOIN {objectQualifier}UserRelationships UREL ON REL.RelationshipID = UREL.RelationshipID AND
                                            ((UREL.UserID = ' + CONVERT(nvarchar(20), @FilterUserId) + ' AND UREL.RelatedUserID = U.UserID) OR
                                            (UREL.UserID = U.UserID AND UREL.RelatedUserID = ' + CONVERT(nvarchar(20), @FilterUserId) + '))'
                                            + ' WHERE UREL.Status = 2'
            END 

        IF @roleAndRelationshipFlag = 1 BEGIN SET @RoleAndRelationshipSelect = ' AND s.UserId IN (SELECT userID FROM  RoleAndRelationUsers) ' END

        SET @roleAndRelationshipFilter =  ', RoleAndRelationUsers AS ( SELECT U.userId FROM {objectQualifier}vw_Users U ' + @roleFilter + @relationshipFilter + ' )' 

        -- ///////////////////////////////////////////////////  
        -- SET UP SORT
        -- ///////////////////////////////////////////////////
        DECLARE @sortSql nvarchar(1000) SET @sortSql = ''
        DECLARE @propertySort nvarchar(1000) SET @propertySort = ''
        DECLARE @filterJoin nvarchar(100) SET @filterJoin = ''
        DECLARE @filterSortSql nvarchar(1000) SET @filterSortSql = ''
        DECLARE @sortByUserProperty BIT         
        SELECT @sortByUserProperty = COUNT(*) FROM @UserColumns WHERE ColumnName = @SortBy

        IF ( @profilePropertyCount > 0 OR @userFilterCount > 0)
	        BEGIN SET @filterJoin = ' INNER JOIN @MatchingUsers m ON m.UserID = s.UserID ' END

        -- Determine the Type of Sort
        IF (@SortBy IS NOT NULL AND @SortBy <> '') AND @sortByUserProperty <> 1
	        BEGIN -- Sort By Profile Property
                SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')
                SET @propertySort = {databaseOwner}{objectQualifier}GetSortSql('PropertyValue',@SortAscending,'UserID')
                SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @propertySort + ' ) AS RowNumber, *  ' 
                                                + ' FROM {objectQualifier}vw_Profile WHERE PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ' AND PropertyName = ''' + @SortBy + ''' )'
                                                + ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
                                                + @filterJoin + ' ) '
	        END
        ELSE
		    BEGIN   
                -- Sort By User Property
                IF @sortByUserProperty = 1 BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')END
                                
                -- Default: Sort By UserID
                ELSE BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql('UserID',@SortAscending,'UserID') END                        
                SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @sortSql + ' ) AS RowNumber, * '
                                                + ' FROM {objectQualifier}vw_Users WHERE (PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ' OR PortalID Is NULL) AND IsDeleted = 0)'
                                                + ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
                                                + @filterJoin + ' ) '
	        END

		-- Check if any Profile Property Definitions exist for this portal
		IF @pivotSql is not null
			BEGIN
				-- SELECT with PIVOT
				SET @pivotSql = 'SELECT * FROM PivotedUsers PIVOT (MAX(PropertyValue) for PropertyName in (' + @pivotSql + ') ) as pivotTable '
			END
		ELSE
			BEGIN
				-- SELECT with DISTINCT
				SET @pivotSql = 'SELECT distinct UserID, PortalID, Username, Email, DisplayName, IsSuperUser, IsDeleted, AffiliateID, UpdatePassword, Authorised FROM PivotedUsers '
			END

        -- ///////////////////////////////////////////////////
        -- CREATE FINAL QUERY
        -- ///////////////////////////////////////////////////
        SET @sql = @filterSql
                + ' DECLARE @TempUsers TABLE (SortOrder INT, UserID INT) '
                + @filterSortSql
                + @roleAndRelationshipFilter
                + ' INSERT INTO @TempUsers SELECT ' + @topSql + ' * FROM (SELECT '
                + ' ROW_NUMBER() OVER ( ORDER BY [RowNumber] ) AS RowNumber, s.UserId FROM MatchingSorted s ' 
                + ' WHERE 1=1 ' + @roleAndRelationshipSelect
				+ ') t WHERE RowNumber >= '+ @minRowNumberSql
                + ' ;WITH PivotedUsers AS ( SELECT U.UserID, U.PortalID, U.Username, U.Email, U.DisplayName, U.IsSuperUser, U.IsDeleted, U.CreatedOnDate,        
                                                U.AffiliateID, U.UpdatePassword, U.Authorised, Prop.PropertyName,
                                                CASE
                                                    WHEN (P.Visibility = 0) THEN P.PropertyValue
                                                    WHEN (P.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN P.PropertyValue
                                                    WHEN (P.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 0 AND ' + CONVERT(nvarchar(20), @UserId) + ' > 0) THEN P.PropertyValue
                                                    WHEN U.UserID = ' + CONVERT(nvarchar(20), @UserId) + ' OR (P.Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN P.PropertyValue
                                                    ELSE NULL
                                                END AS PropertyValue
                                            FROM   {objectQualifier}vw_Users AS U
                                                INNER JOIN {objectQualifier}UserProfile AS P ON U.UserID = P.UserID
                                                LEFT OUTER JOIN {objectQualifier}ProfilePropertyDefinition AS Prop ON 
                                                (Prop.PropertyDefinitionID = P.PropertyDefinitionID and Prop.Deleted = 0 and Prop.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ')
                                            WHERE U.UserId IN (SELECT UserId FROM @TempUsers) AND (U.PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ' OR U.PortalId IS NULL)
                                            )' +
                @pivotSql + @sortSql            

        EXEC(@sql)
GO

/*** Fix bug CONTENT-1982 - Cross-site-Shared-Modules still sharing updates after deleting Site-Group ***/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSharedModulesByPortal]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSharedModulesByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSharedModulesByPortal]
	@Portald int
AS
	SELECT * FROM {databaseOwner}vw_TabModules tb		
	WHERE tb.PortalID != tb.OwnerPortalID	
	AND tb.OwnerPortalID = @Portald

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSharedModulesWithPortal]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSharedModulesWithPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSharedModulesWithPortal]
	@Portald int
AS
	SELECT * FROM {databaseOwner}vw_TabModules tb		
	WHERE tb.PortalID != tb.OwnerPortalID	
	AND tb.PortalID = @Portald

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]
@FileId int,
@LastModificationTime datetime
AS
	UPDATE {databaseOwner}{objectQualifier}Files 
	SET [LastModificationTime] = @LastModificationTime
	WHERE [FileId] = @FileId
GO

/***** Fix bug DNN-3718: update sp UnRegisterAssembly to don't delete assembly which still exist in db. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UnRegisterAssembly]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}UnRegisterAssembly
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UnRegisterAssembly
	@PackageID     INT,
	@AssemblyName   NVARCHAR(250)
AS
	DECLARE @ReturnCode BIT
	SET @ReturnCode = 1 -- 1 = Can Delete Assembly, 0 = Cannot Delete Assembly

	-- First remove the Assembly Reference for this Package
	DELETE FROM {databaseOwner}{objectQualifier}Assemblies
		WHERE PackageID = @PackageID
			AND AssemblyName = @AssemblyName

	IF EXISTS(SELECT TOP 1 PackageID FROM {databaseOwner}{objectQualifier}Assemblies WHERE AssemblyName = @AssemblyName)
		-- Set ReturnCode = 0, so assembly is not deleted
		SET @ReturnCode = 0

	SELECT @ReturnCode
GO

/* update GetListParentKey for longer paths */
/********************************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetListParentKey]') and OBJECTPROPERTY(id, N'IsScalarFunction') = 1)
	DROP FUNCTION {databaseOwner}[{objectQualifier}GetListParentKey]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}GetListParentKey]
(
	@ParentID AS int,
	@ListName as nvarchar(500),
	@Type as nvarchar(50),
	@Count as int 
)
RETURNS nvarchar(2000)

AS
	BEGIN
		DECLARE @KeyValue nvarchar(2000)
		DECLARE @ListValue nvarchar(2000)
		DECLARE @TextValue nvarchar(2000)
		DECLARE @ReturnValue nvarchar(2000)
		DECLARE @Key nvarchar(2000)
		
		IF @ParentID = 0
			IF @Count = 0
				SET @ReturnValue = ''
			ELSE
				SET @ReturnValue = @ListName
		ELSE
			BEGIN
				SELECT	@KeyValue = ListName + '.' + [Value],
						@TextValue = ListName + '.' + [Text], 
						@ListValue = ListName, 
						@ParentID = ParentID  
					FROM {databaseOwner}{objectQualifier}Lists 
					WHERE EntryID = @ParentID
				If @Type = 'ParentKey' Or (@Type = 'ParentList' AND @Count > 0)
					SET @ReturnValue = @KeyValue
				ELSE 
					IF @Type = 'ParentList'
						SET @ReturnValue = @ListValue
					ELSE
						SET @ReturnValue = @TextValue
				IF @Count > 0
					If @Count = 1 AND @Type = 'ParentList'
						SET @ReturnValue = @ReturnValue + ':' + @ListName
					ELSE
						SET @ReturnValue = @ReturnValue + '.' + @ListName
				SET @ReturnValue = {databaseOwner}{objectQualifier}GetListParentKey(@ParentID, @ReturnValue, @Type, @Count+1)
			END

		RETURN    @ReturnValue
	END
GO

/*DNN-3215 - drop unused legacy procedures */
/*******************************************/
 
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetSkins]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSkins]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetSkin]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSkin]
GO

/*DNN-3214 - Modify GetSiteLogXX stored procedures to make them Azure compliant (Remove string literals as column aliases) */
/**************************************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog1]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog1]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog12]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog12]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog2]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog2]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog3]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog3]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog4]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog4]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog5]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog5]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog6]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog6]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog7]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog7]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog8]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog8]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSiteLog9]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSiteLog9]
GO


create procedure {databaseOwner}{objectQualifier}GetSiteLog1

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select convert(varchar,DateTime,102) AS 'Date',
 count(*) AS 'Views',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserHostAddress) AS 'Visitors',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserId) 'Users'
from {databaseOwner}{objectQualifier}SiteLog
where PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by convert(varchar,DateTime,102)
order by Date desc
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog2

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select {databaseOwner}{objectQualifier}SiteLog.DateTime, 
 case
when {databaseOwner}{objectQualifier}SiteLog.UserId is null then null
else {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName
end AS 'Name',
 case 
 when {databaseOwner}{objectQualifier}SiteLog.Referrer like '%' + @PortalAlias + '%' then null 
 else {databaseOwner}{objectQualifier}SiteLog.Referrer
 end AS 'Referrer', 
 case 
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 1%' then 'Internet Explorer 1'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 2%' then 'Internet Explorer 2'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 3%' then 'Internet Explorer 3'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 4%' then 'Internet Explorer 4'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 5%' then 'Internet Explorer 5'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 6%' then 'Internet Explorer 6'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE%' then 'Internet Explorer'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/1%' then 'Netscape Navigator 1'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/2%' then 'Netscape Navigator 2'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/3%' then 'Netscape Navigator 3'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/4%' then 'Netscape Navigator 4'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/5%' then 'Netscape Navigator 6+'
 else {databaseOwner}{objectQualifier}SiteLog.UserAgent
 end 'UserAgent',
 {databaseOwner}{objectQualifier}SiteLog.UserHostAddress,
 {databaseOwner}{objectQualifier}Tabs.TabName
from {databaseOwner}{objectQualifier}SiteLog
left outer join {databaseOwner}{objectQualifier}Users on {databaseOwner}{objectQualifier}SiteLog.UserId = {databaseOwner}{objectQualifier}Users.UserId 
left outer join {databaseOwner}{objectQualifier}Tabs on {databaseOwner}{objectQualifier}SiteLog.TabId = {databaseOwner}{objectQualifier}Tabs.TabId 
where {databaseOwner}{objectQualifier}SiteLog.PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
order by {databaseOwner}{objectQualifier}SiteLog.DateTime desc
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog3

	@PortalID int,
	@PortalAlias nvarchar(50),
	@StartDate datetime,
	@EndDate datetime

as

select {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {databaseOwner}{objectQualifier}Users.LastName AS 'Name',
	count(*) AS 'Requests',
	max(DateTime) AS 'LastRequest'
from {databaseOwner}{objectQualifier}SiteLog
inner join {databaseOwner}{objectQualifier}Users on {databaseOwner}{objectQualifier}SiteLog.UserId = {databaseOwner}{objectQualifier}Users.UserId
where {databaseOwner}{objectQualifier}SiteLog.PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and {databaseOwner}{objectQualifier}SiteLog.UserId is not null
group by {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {databaseOwner}{objectQualifier}Users.LastName
order by Requests desc
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog4

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select Referrer,
 count(*) AS 'Requests',
 max(DateTime) AS 'LastRequest'
from {databaseOwner}{objectQualifier}SiteLog
where {databaseOwner}{objectQualifier}SiteLog.PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and Referrer is not null
and Referrer not like '%' + @PortalAlias + '%'
group by Referrer
order by Requests desc
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog5

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select
 case 
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 1%' then 'Internet Explorer 1'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 2%' then 'Internet Explorer 2'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 3%' then 'Internet Explorer 3'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 4%' then 'Internet Explorer 4'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 5%' then 'Internet Explorer 5'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 6%' then 'Internet Explorer 6'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE%' then 'Internet Explorer'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/1%' then 'Netscape Navigator 1'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/2%' then 'Netscape Navigator 2'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/3%' then 'Netscape Navigator 3'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/4%' then 'Netscape Navigator 4'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/5%' then 'Netscape Navigator 6+'
 else {databaseOwner}{objectQualifier}SiteLog.UserAgent
 end AS 'UserAgent',
 count(*) AS 'Requests',
 max(DateTime) AS 'LastRequest'
from {databaseOwner}{objectQualifier}SiteLog
where PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by case 
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 1%' then 'Internet Explorer 1'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 2%' then 'Internet Explorer 2'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 3%' then 'Internet Explorer 3'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 4%' then 'Internet Explorer 4'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 5%' then 'Internet Explorer 5'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE 6%' then 'Internet Explorer 6'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%MSIE%' then 'Internet Explorer'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/1%' then 'Netscape Navigator 1'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/2%' then 'Netscape Navigator 2'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/3%' then 'Netscape Navigator 3'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/4%' then 'Netscape Navigator 4'
 when {databaseOwner}{objectQualifier}SiteLog.UserAgent like '%Mozilla/5%' then 'Netscape Navigator 6+'
 else {databaseOwner}{objectQualifier}SiteLog.UserAgent
 end
order by Requests desc
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog6

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select datepart(hour,DateTime) AS 'Hour',
 count(*) AS 'Views',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserHostAddress) AS 'Visitors',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserId) AS 'Users'
from {databaseOwner}{objectQualifier}SiteLog
where PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by datepart(hour,DateTime)
order by Hour
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog7

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select datepart(weekday,DateTime) AS 'WeekDay',
 count(*) AS 'Views',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserHostAddress) AS 'Visitors',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserId) AS 'Users'
from {databaseOwner}{objectQualifier}SiteLog
where PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by datepart(weekday,DateTime)
order by WeekDay
GO


create procedure {databaseOwner}{objectQualifier}GetSiteLog8

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select datepart(month,DateTime) AS 'Month',
 count(*) AS 'Views',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserHostAddress) AS 'Visitors',
 count(distinct {databaseOwner}{objectQualifier}SiteLog.UserId) AS 'Users'
from {databaseOwner}{objectQualifier}SiteLog
where PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by datepart(month,DateTime)
order by Month
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog9

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select {databaseOwner}{objectQualifier}Tabs.TabName AS 'Page',
 count(*) AS 'Requests',
 max(DateTime) AS 'LastRequest'
from {databaseOwner}{objectQualifier}SiteLog
inner join {databaseOwner}{objectQualifier}Tabs on {databaseOwner}{objectQualifier}SiteLog.TabId = {databaseOwner}{objectQualifier}Tabs.TabId
where {databaseOwner}{objectQualifier}SiteLog.PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and {databaseOwner}{objectQualifier}SiteLog.TabId is not null
group by {databaseOwner}{objectQualifier}Tabs.TabName
order by Requests desc
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog12

@PortalID int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select AffiliateId,
 count(*) AS 'Requests',
 max(DateTime) AS 'LastReferral'
from {databaseOwner}{objectQualifier}SiteLog
where {databaseOwner}{objectQualifier}SiteLog.PortalId = @PortalID
and {databaseOwner}{objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and AffiliateId is not null
group by AffiliateId
order by Requests desc
GO

/*DNN-3216 - String literals as column aliases in SP (not allowed in SQL Azure) */
/*******************************************************************************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetAffiliates]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAffiliates]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetPortalSpaceUsed]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSpaceUsed]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetTables]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTables]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetUrLLog]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUrLLog]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetVendorClassifications]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetVendorClassifications]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetVendors]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetVendors]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetVendorsByEmail]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetVendorsByEmail]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetVendorsByName]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetVendorsByName]
GO



create procedure {databaseOwner}{objectQualifier}GetAffiliates

@VendorId int

as

select AffiliateId,
       StartDate,
       EndDate,
       CPC,
       Clicks,
       Clicks * CPC AS 'CPCTotal',
       CPA,
       Acquisitions,
       Acquisitions * CPA 'CPATotal'
from   {databaseOwner}{objectQualifier}Affiliates
where  VendorId = @VendorId
order  by StartDate desc
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPortalSpaceUsed
	@PortalID int
AS

SELECT SUM(CAST(Size as bigint)) AS 'SpaceUsed'
FROM   {objectQualifier}Files
WHERE  ((PortalId = @PortalID) OR (@PortalID is null and PortalId is null))
GO


 create procedure {databaseOwner}{objectQualifier}GetTables

as

/* Be carefull when changing this procedure as the GetSearchTables() function 
   in SearchDB.cs is only looking at the first column (to support databases that cannot return 
   a TableName column name (like MySQL))
*/

select [name] AS 'TableName'
from   sysobjects 
where  xtype = 'U'
GO


 create procedure {databaseOwner}{objectQualifier}GetUrlLog

@URLTrackingID int,
@StartDate     datetime,
@EndDate       datetime

as

select {databaseOwner}{objectQualifier}UrlLog.*,
       {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {databaseOwner}{objectQualifier}Users.LastName AS 'FullName'
from   {databaseOwner}{objectQualifier}UrlLog
inner join {databaseOwner}{objectQualifier}UrlTracking on {databaseOwner}{objectQualifier}UrlLog.UrlTrackingId = {databaseOwner}{objectQualifier}UrlTracking.UrlTrackingId
left outer join {databaseOwner}{objectQualifier}Users on {databaseOwner}{objectQualifier}UrlLog.UserId = {databaseOwner}{objectQualifier}Users.UserId
where  {databaseOwner}{objectQualifier}UrlLog.UrlTrackingID = @UrlTrackingID
and    ((ClickDate >= @StartDate) or @StartDate is null)
and    ((ClickDate <= @EndDate) or @EndDate is null)
order by ClickDate
GO


create procedure {databaseOwner}{objectQualifier}GetVendorClassifications

@VendorId  int

as

select ClassificationId,
       ClassificationName,
       case when exists ( select 1 from {databaseOwner}{objectQualifier}VendorClassification vc where vc.VendorId = @VendorId and vc.ClassificationId = {objectQualifier}Classification.ClassificationId ) then 1 else 0 end AS 'IsAssociated'
from {databaseOwner}{objectQualifier}Classification
GO


CREATE procedure {databaseOwner}{objectQualifier}GetVendors
	@PortalID int,
	@UnAuthorized bit,
	@PageSize int,
	@PageIndex int
AS

	DECLARE @PageLowerBound int
	DECLARE @PageUpperBound int
	-- Set the page bounds
	SET @PageLowerBound = @PageSize * @PageIndex
	SET @PageUpperBound = @PageLowerBound + @PageSize + 1

	CREATE TABLE #PageIndex 
	(
		IndexID		int IDENTITY (1, 1) NOT NULL,
		VendorId	int
	)

	INSERT INTO #PageIndex (VendorId)
	SELECT VendorId
	FROM {objectQualifier}Vendors
	WHERE ( ((Authorized = 0 AND @UnAuthorized = 1) OR @UnAuthorized = 0 ) AND ((PortalId = @PortalID) or (@PortalID is null and PortalId is null)) )
	ORDER BY VendorId DESC


	SELECT COUNT(*) as TotalRecords
	FROM #PageIndex


	SELECT {databaseOwner}{objectQualifier}Vendors.*,
       		( select count(*) from {databaseOwner}{objectQualifier}Banners where {databaseOwner}{objectQualifier}Banners.VendorId = {databaseOwner}{objectQualifier}Vendors.VendorId ) AS 'Banners'
	FROM {databaseOwner}{objectQualifier}Vendors
	INNER JOIN #PageIndex PageIndex
		ON {databaseOwner}{objectQualifier}Vendors.VendorId = PageIndex.VendorId
	WHERE ( (PageIndex.IndexID > @PageLowerBound) OR @PageLowerBound is null )	
		AND ( (PageIndex.IndexID < @PageUpperBound) OR @PageUpperBound is null )	
	ORDER BY
		PageIndex.IndexID
GO

 CREATE procedure {databaseOwner}{objectQualifier}GetVendorsByEmail
	@Filter nvarchar(50),
	@PortalID int,
	@PageSize int,
	@PageIndex int
AS

	DECLARE @PageLowerBound int
	DECLARE @PageUpperBound int
	-- Set the page bounds
	SET @PageLowerBound = @PageSize * @PageIndex
	SET @PageUpperBound = @PageLowerBound + @PageSize + 1

	CREATE TABLE #PageIndex 
	(
		IndexID		int IDENTITY (1, 1) NOT NULL,
		VendorId	int
	)

	INSERT INTO #PageIndex (VendorId)
	SELECT VendorId
	FROM {databaseOwner}{objectQualifier}Vendors
	WHERE ( (Email like @Filter + '%') AND ((PortalId = @PortalID) or (@PortalID is null and PortalId is null)) )
	ORDER BY VendorId DESC


	SELECT COUNT(*) as TotalRecords
	FROM #PageIndex


	SELECT {databaseOwner}{objectQualifier}Vendors.*,
       		( select count(*) from {databaseOwner}{objectQualifier}Banners where {databaseOwner}{objectQualifier}Banners.VendorId = {databaseOwner}{objectQualifier}Vendors.VendorId ) AS 'Banners'
	FROM {databaseOwner}{objectQualifier}Vendors
	INNER JOIN #PageIndex PageIndex
		ON {databaseOwner}{objectQualifier}Vendors.VendorId = PageIndex.VendorId
	WHERE ( (PageIndex.IndexID > @PageLowerBound) OR @PageLowerBound is null )	
		AND ( (PageIndex.IndexID < @PageUpperBound) OR @PageUpperBound is null )	
	ORDER BY
		PageIndex.IndexID
GO


 CREATE procedure {databaseOwner}{objectQualifier}GetVendorsByName
	@Filter nvarchar(50),
	@PortalID int,
	@PageSize int,
	@PageIndex int
AS

	DECLARE @PageLowerBound int
	DECLARE @PageUpperBound int
	-- Set the page bounds
	SET @PageLowerBound = @PageSize * @PageIndex
	SET @PageUpperBound = @PageLowerBound + @PageSize + 1

	CREATE TABLE #PageIndex 
	(
		IndexID		int IDENTITY (1, 1) NOT NULL,
		VendorId	int
	)

	INSERT INTO #PageIndex (VendorId)
	SELECT VendorId
	FROM {databaseOwner}{objectQualifier}Vendors
	WHERE ( (VendorName like @Filter + '%') AND ((PortalId = @PortalID) or (@PortalID is null and PortalId is null)) )
	ORDER BY VendorId DESC


	SELECT COUNT(*) as TotalRecords
	FROM #PageIndex


	SELECT {databaseOwner}{objectQualifier}Vendors.*,
       		( select count(*) from {databaseOwner}{objectQualifier}Banners where {databaseOwner}{objectQualifier}Banners.VendorId = {objectQualifier}Vendors.VendorId ) AS 'Banners'
	FROM {databaseOwner}{objectQualifier}Vendors
	INNER JOIN #PageIndex PageIndex
		ON {databaseOwner}{objectQualifier}Vendors.VendorId = PageIndex.VendorId
	WHERE ( (PageIndex.IndexID > @PageLowerBound) OR @PageLowerBound is null )	
		AND ( (PageIndex.IndexID < @PageUpperBound) OR @PageUpperBound is null )	
	ORDER BY
		PageIndex.IndexID
GO

/* DNN-3017 Add Indexes */
/************************/

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}Files_FolderID' AND object_id = OBJECT_ID('{objectQualifier}Files'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Files_FolderID] ON {databaseOwner}[{objectQualifier}Files] 
			(
				[FolderID]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}EventLog_LogConfigID' AND object_id = OBJECT_ID('{objectQualifier}EventLog'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EventLog_LogConfigID] ON {databaseOwner}[{objectQualifier}EventLog] 
			(
				[LogConfigID],
				[LogNotificationPending],
				[LogCreateDate]
			)
			INCLUDE 
			(
				[LogEventID]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}EventLog_LogCreateDate' AND object_id = OBJECT_ID('{objectQualifier}EventLog'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EventLog_LogCreateDate] ON {databaseOwner}[{objectQualifier}EventLog] 
			(
				[LogCreateDate]
			)
			INCLUDE 
			(
				[LogConfigID]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}UrlTracking_Url_ModuleId' AND object_id = OBJECT_ID('{objectQualifier}UrlTracking'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UrlTracking_Url_ModuleId] ON {databaseOwner}[{objectQualifier}UrlTracking] 
			(
				[Url],
				[ModuleId]
			)
			INCLUDE 
			(
				[TrackClicks],
				[NewWindow]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}UrlTracking_ModuleId' AND object_id = OBJECT_ID('{objectQualifier}UrlTracking'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UrlTracking_ModuleId] ON {databaseOwner}[{objectQualifier}UrlTracking] 
			(
				[ModuleId]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ContentItems_TabID' AND object_id = OBJECT_ID('{objectQualifier}ContentItems'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}ContentItems_TabID] ON {databaseOwner}[{objectQualifier}ContentItems] 
			(
				[TabID]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}Tabs_ParentId_IsDeleted' AND object_id = OBJECT_ID('{objectQualifier}Tabs'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Tabs_ParentId_IsDeleted] ON {databaseOwner}[{objectQualifier}Tabs] 
			(
				[ParentId],
				[IsDeleted]
			)
			INCLUDE 
			(
				[CreatedOnDate]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}Tabs_ParentId_IsDeleted_2' AND object_id = OBJECT_ID('{objectQualifier}Tabs'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Tabs_ParentId_IsDeleted_2] ON {databaseOwner}[{objectQualifier}Tabs] 
			(
				[ParentId],
				[IsDeleted]
			)
			INCLUDE 
			(
				[TabID],
				[TabOrder],
				[PortalID],
				[TabName],
				[IsVisible],
				[IconFile],
				[DisableLink],
				[Title],
				[Description],
				[KeyWords],
				[Url],
				[SkinSrc],
				[ContainerSrc],
				[StartDate],
				[EndDate],
				[RefreshInterval],
				[PageHeadText],
				[IsSecure],
				[PermanentRedirect],
				[SiteMapPriority],
				[CreatedByUserID],
				[CreatedOnDate],
				[LastModifiedByUserID],
				[LastModifiedOnDate],
				[IconFileLarge],
				[CultureCode],
				[ContentItemID],
				[UniqueId],
				[VersionGuid],
				[DefaultLanguageGuid],
				[LocalizedVersionGuid],
				[Level],
				[TabPath]
			)
    END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabModules_ModuleID' AND object_id = OBJECT_ID('{objectQualifier}TabModules'))
    BEGIN
        CREATE NONCLUSTERED INDEX [IX_{objectQualifier}TabModules_ModuleID] ON {databaseOwner}[{objectQualifier}TabModules] 
			(
				[ModuleID]
			)
			INCLUDE 
			(
				[TabID]
			)
    END
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/