/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

-- DNN-4740
IF EXISTS (SELECT * FROM Sys.Check_Constraints WHERE parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Roles]') AND name = N'CK_{objectQualifier}Roles_PortalId')
	ALTER TABLE {databaseOwner}[{objectQualifier}Roles] DROP CONSTRAINT CK_{objectQualifier}Roles_PortalId
GO

/***** Task DNN-DNN-3371: update sp Journal_Get to can check security setting, also update func Journal_User_Permissions to get correct role info. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Get]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Get
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
	@PortalId int,
	@CurrentUserId int,
	@JournalId int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0,
    @SecurityCheck BIT = 0
	AS
	SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, ContentItemId, j.ItemData, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM       	{databaseOwner}[{objectQualifier}Journal] AS j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId
                INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] AS js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey OR @SecurityCheck = 0
                LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (j.JournalId = @JournalId AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (j.JournalId = @JournalId))
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_User_Permissions]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
(
	@PortalId int,
	@UserId int,
	@RegisteredRoleId int
)
RETURNS 
@tmp TABLE (seckey nvarchar(200))

AS
BEGIN
IF @UserId > 0
		BEGIN
            IF @RegisteredRoleId = 1
				SELECT @RegisteredRoleId = RegisteredRoleId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalId
			INSERT INTO @tmp (seckey) VALUES ('U' + Cast(@UserId as nvarchar(200)))
			INSERT INTO @tmp (seckey) VALUES ('P' + Cast(@UserId as nvarchar(200)))
			INSERT INTO @tmp (seckey) VALUES ('F' + Cast(@UserId as nvarchar(200)))
			IF EXISTS(SELECT RoleId FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID = @UserId AND RoleId = @RegisteredRoleId
						AND    (EffectiveDate <= getdate() or EffectiveDate is null)
						AND    (ExpiryDate >= getdate() or ExpiryDate is null))
					INSERT INTO @tmp (seckey) VALUES ('C')
			
		END
		
	INSERT INTO @tmp (seckey) VALUES ('E')
	
	INSERT INTO @tmp (seckey)
	SELECT 'R' + CAST(ur.RoleId as nvarchar(200)) 
		FROM {databaseOwner}[{objectQualifier}UserRoles] as ur
			INNER JOIN {databaseOwner}[{objectQualifier}Users] as u on ur.UserId = u.UserId
			INNER JOIN {databaseOwner}[{objectQualifier}Roles] as r on ur.RoleId = r.RoleId
		WHERE  u.UserId = @UserId
			AND    r.PortalId = @PortalId
			AND    (EffectiveDate <= getdate() or EffectiveDate is null)
			AND    (ExpiryDate >= getdate() or ExpiryDate is null)
	INSERT INTO @tmp (seckey)
		SELECT (SELECT CASE WHEN @UserID = ur.UserId 
						THEN 'F' + CAST(RelatedUserID as nvarchar(200))
						ELSE 'F' + CAST(ur.UserId as nvarchar(200)) END) 
		FROM {databaseOwner}[{objectQualifier}UserRelationships] ur
		INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r ON ur.RelationshipID = r.RelationshipID AND r.RelationshipTypeID = 1
		WHERE (ur.UserId = @UserId OR RelatedUserID = @UserId) AND Status = 2
	RETURN 
END

GO

-- DNN-4537:
-- Optimize Indexes on DesktopModulePermission table:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}DesktopModulePermission] DROP CONSTRAINT [IX_{objectQualifier}DesktopModulePermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission_DesktopModules' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	DROP INDEX [IX_{objectQualifier}DesktopModulePermission_DesktopModules] ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}DesktopModulePermission_DesktopModules ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
	(PortalDesktopModuleID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission_Users' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	DROP INDEX [IX_{objectQualifier}DesktopModulePermission_Users] ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}DesktopModulePermission_Users ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
	(UserID, PortalDesktopModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	DROP INDEX [IX_{objectQualifier}DesktopModulePermission_Roles] ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}DesktopModulePermission_Roles ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
	(RoleID, PortalDesktopModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


-- Optimize Indexes on FolderPermission table:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}FolderPermission] DROP CONSTRAINT [IX_{objectQualifier}FolderPermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission_Folders' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	DROP INDEX [IX_{objectQualifier}FolderPermission_Folders] ON {databaseOwner}[{objectQualifier}FolderPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}FolderPermission_Folders ON {databaseOwner}[{objectQualifier}FolderPermission]
	(FolderID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission_Users' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	DROP INDEX [IX_{objectQualifier}FolderPermission_Users] ON {databaseOwner}[{objectQualifier}FolderPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}FolderPermission_Users ON {databaseOwner}[{objectQualifier}FolderPermission]
	(UserID, FolderID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	DROP INDEX [IX_{objectQualifier}FolderPermission_Roles] ON {databaseOwner}[{objectQualifier}FolderPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}FolderPermission_Roles ON {databaseOwner}[{objectQualifier}FolderPermission]
	(RoleID, FolderID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


-- Optimize Indexes on ModulePermission table:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}ModulePermission] DROP CONSTRAINT [IX_{objectQualifier}ModulePermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Modules' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Modules] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Modules ON {databaseOwner}[{objectQualifier}ModulePermission]
	(ModuleID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Users' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Users] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Users ON {databaseOwner}[{objectQualifier}ModulePermission]
	(UserID, ModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Roles] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Roles ON {databaseOwner}[{objectQualifier}ModulePermission]
	(RoleID, ModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


-- Optimize Indexes on TabPermission table: remove redundant index on tabPermission table, optimize indexes
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}TabPermission] DROP CONSTRAINT [IX_{objectQualifier}TabPermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission_Tabs' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	DROP INDEX [IX_{objectQualifier}TabPermission_Tabs] ON {databaseOwner}[{objectQualifier}TabPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}TabPermission_Tabs ON {databaseOwner}[{objectQualifier}TabPermission]
	(TabID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO


IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission_Users' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	DROP INDEX [IX_{objectQualifier}TabPermission_Users] ON {databaseOwner}[{objectQualifier}TabPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}TabPermission_Users ON {databaseOwner}[{objectQualifier}TabPermission]
	(UserID, TabID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO


IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	DROP INDEX [IX_{objectQualifier}TabPermission_Roles] ON {databaseOwner}[{objectQualifier}TabPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}TabPermission_Roles ON {databaseOwner}[{objectQualifier}TabPermission]
	(RoleID, TabID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO

-- DNN-4319: Optimized
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]
    @TabId Int -- Not Null!
AS
    SELECT MP.*
    FROM        {databaseOwner}[{objectQualifier}Tabs]                 AS T
    INNER JOIN  {databaseOwner}[{objectQualifier}TabModules]           AS TM ON TM.TabID    = T.TabID
    INNER JOIN  {databaseOwner}[{objectQualifier}vw_ModulePermissions] AS MP ON TM.ModuleID = MP.ModuleID AND T.PortalID = MP.PortalID
    WHERE T.TabID = @TabId
GO

-- DNN-4318: view does contain all necessary columns
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetModulePermissionsByPortal]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByPortal]
    @PortalId Int -- Not Null!
AS
    SELECT *
    FROM {databaseOwner}[{objectQualifier}vw_ModulePermissions]
    WHERE PortalID = @PortalID
GO

-- DNN-4317: optimize for performance
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetModulePermissionsByModuleID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByModuleID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByModuleID]
    @ModuleId       Int,   -- Null|-1 for all modules
    @PermissionId   Int    -- Null|-1 for all permissions
AS
BEGIN
	IF (IsNull(@ModuleId, -1) = -1) -- separate branches with individual query optimization
		SELECT *
		  FROM {databaseOwner}[{objectQualifier}vw_ModulePermissions]
		 WHERE (PermissionID = @PermissionId OR IsNull(@PermissionId, -1) = -1)
	 ELSE
		SELECT *
		FROM {databaseOwner}[{objectQualifier}vw_ModulePermissions]
		WHERE ((ModuleID = @ModuleId) OR (ModuleID IS NULL AND PermissionCode = 'SYSTEM_MODULE_DEFINITION'))
		AND (PermissionID = @PermissionId OR IsNull(@PermissionId, -1) = -1)
END
GO

-- DNN-4315: optimized to use a subquery
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteFolderPermissionsByUserID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByUserID]
    @PortalId Int,  -- Null|-1 for Host menu tabs
    @UserId   Int   -- Not Null
AS
    DELETE FROM {databaseOwner}[{objectQualifier}FolderPermission]
    WHERE UserID = @UserId
     AND FolderID IN (SELECT FolderID FROM {databaseOwner}[{objectQualifier}Folders] 
	                  WHERE (PortalID = @PortalId Or IsNull(@PortalId, -1) = IsNull(PortalID, -1)))
GO

-- DNN-4314: optimized to use a single statement
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteFolderPermissionsByFolderPath]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByFolderPath]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByFolderPath]
    @PortalId   Int,            -- Null for Host menu tabs
    @FolderPath nVarChar(300)   -- must be a valid path
AS
BEGIN
    DELETE FROM {databaseOwner}[{objectQualifier}FolderPermission]
    WHERE FolderID IN (SELECT FolderID FROM {databaseOwner}[{objectQualifier}Folders]
                                       WHERE FolderPath = @FolderPath AND (IsNull(PortalID, -1) = IsNull(@PortalId, -1)))
END
GO

-- DNN-4622:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}EventLog_LogConfigID' AND object_id = OBJECT_ID('{objectQualifier}EventLog'))
    DROP INDEX [IX_{objectQualifier}EventLog_LogConfigID] ON {databaseOwner}[{objectQualifier}EventLog] 
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EventLog_LogConfigID] ON {databaseOwner}[{objectQualifier}EventLog] 
	([LogConfigID], [LogNotificationPending], [LogCreateDate])
	INCLUDE ([LogEventID])
GO


IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}EventLog_LogCreateDate' AND object_id = OBJECT_ID('{objectQualifier}EventLog'))
	DROP INDEX [IX_{objectQualifier}EventLog_LogCreateDate] ON {databaseOwner}[{objectQualifier}EventLog] 
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EventLog_LogCreateDate] ON {databaseOwner}[{objectQualifier}EventLog] 
	([LogCreateDate])
	INCLUDE ([LogConfigID])
GO


IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}EventLog_LogType' AND object_id = OBJECT_ID('{objectQualifier}EventLog'))
	DROP INDEX [IX_{objectQualifier}EventLog_LogType] ON {databaseOwner}[{objectQualifier}EventLog] 
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EventLog_LogType] ON {databaseOwner}[{objectQualifier}EventLog] 
	([LogTypeKey], [LogPortalID])
GO

--Add stored procedure to update subscription descriptions

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}CoreMessaging_UpdateSubscriptionDescription]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}CoreMessaging_UpdateSubscriptionDescription
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateSubscriptionDescription]
	@ObjectKey NVARCHAR(255), 
    @PortalId INT,
    @Description NVARCHAR(255)	
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
		SET [Description] = @Description
		WHERE PortalId = @PortalId 
		AND ObjectKey LIKE @ObjectKey		
		SELECT @@ROWCOUNT AS [ResultStatus]      
	END
GO

-- DNN-4316

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]
    @PortalId Int   -- Null|-1 for Host menu tabs
AS
    SELECT *
    FROM {databaseOwner}[{objectQualifier}vw_FolderPermissions]
    WHERE IsNull(PortalID, -1) = IsNull(@PortalId, -1)
GO	

-- DNN-4313
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddDesktopModulePermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}AddDesktopModulePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddDesktopModulePermission]
    @PortalDesktopModuleID Int, -- not null!
    @PermissionId          Int, -- not null!
    @RoleId                Int, -- might be negative for virtual roles
    @AllowAccess           Bit, -- false: deny, true: grant
    @UserId                Int, -- -1 is replaced by Null
    @CreatedByUserId       Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}DesktopModulePermission] (
        [PortalDesktopModuleID],
        [PermissionID],
        [RoleID],
        [AllowAccess],
        [UserID],
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate]
    ) VALUES (
        @PortalDesktopModuleID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddFolderPermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}AddFolderPermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFolderPermission]
    @FolderID           Int, -- not Null!
    @PermissionId       Int, -- not Null!
    @RoleId             Int, -- might be negative for virtual roles
    @AllowAccess        Bit, -- false: deny, true: grant
    @UserId             Int, -- -1 is replaced by Null
    @CreatedByUserId    Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}FolderPermission] (
        [FolderID],
        [PermissionID],
        [RoleId],
        [AllowAccess],
        [UserId],
        [CreatedByUserId],
        [CreatedOnDate],
        [LastModifiedByUserId],
        [LastModifiedOnDate]
    ) VALUES (
        @FolderID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddModulePermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}AddModulePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddModulePermission]
    @ModuleID           Int, -- not null!
    @PortalID           Int, -- not null!
    @PermissionId       Int, -- not null!
    @RoleId             Int, -- might be negative for virtual roles
    @AllowAccess        Bit, -- false: deny, true: grant
    @UserId             Int, -- -1 is replaced by Null
    @CreatedByUserId    Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}ModulePermission] (
        [ModuleID],
        [PortalID],
        [PermissionID],
        [RoleId],
        [AllowAccess],
        [UserId],
        [CreatedByUserId],
        [CreatedOnDate],
        [LastModifiedByUserId],
        [LastModifiedOnDate]
    ) VALUES (
        @ModuleID,
        @PortalID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabPermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabPermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabPermission]
    @TabID              Int, -- not null!
    @PermissionId       Int, -- not null!
    @RoleId             Int, -- might be negative for virtual roles
    @AllowAccess        Bit, -- false: deny, true: grant
    @UserId             Int, -- -1 is replaced by Null
    @CreatedByUserId    Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}TabPermission] (
        [TabID],
        [PermissionID],
        [RoleId],
        [AllowAccess],
        [UserId],
        [CreatedByUserId],
        [CreatedOnDate],
        [LastModifiedByUserId],
        [LastModifiedOnDate]
    ) VALUES (
        @TabID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateDesktopModulePermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateDesktopModulePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateDesktopModulePermission]
    @DesktopModulePermissionId Int, -- not null!
    @PortalDesktopModuleId     Int, -- not null!
    @PermissionId              Int, -- not null!
    @RoleId                    Int, -- might be negative for virtual roles
    @AllowAccess               Bit, -- false: deny, true: grant
    @UserId                    Int, -- -1 is replaced by Null
    @LastModifiedByUserId      Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}DesktopModulePermission]
    SET
        [PortalDesktopModuleId] = @PortalDesktopModuleId,
        [PermissionId]          = @PermissionId,
        [RoleId]                = @RoleId,
        [AllowAccess]           = @AllowAccess,
        [UserId]                = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId]  = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]    = GetDate()
    WHERE [DesktopModulePermissionId] = @DesktopModulePermissionId
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateFolderPermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderPermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderPermission]
    @FolderPermissionID     Int, -- not null!
    @FolderID               Int, -- not null!
    @PermissionId           Int, -- not null!
    @RoleId                 Int, -- might be negative for virtual roles
    @AllowAccess            Bit, -- false: deny, true: grant
    @UserId                 Int, -- -1 is replaced by Null
    @LastModifiedByUserId   Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}FolderPermission] SET
        [FolderID]             = @FolderID,
        [PermissionID]         = @PermissionID,
        [RoleId]               = @RoleId,
        [AllowAccess]          = @AllowAccess,
        [UserId]               = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId] = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]   = GetDate()
    WHERE
        [FolderPermissionID]   = @FolderPermissionID
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateModulePermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateModulePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModulePermission]
    @ModulePermissionId     Int, -- not null!
    @PortalId               Int, -- not null!
    @ModuleId               Int, -- not null!
    @PermissionId           Int, -- not null!
    @RoleId                 Int, -- might be negative for virtual roles
    @AllowAccess            Bit, -- false: deny, true: grant
    @UserId                 Int, -- -1 is replaced by Null
    @LastModifiedByUserId   Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}ModulePermission] SET
        [ModuleId]             = @ModuleId,
        [PortalId]             = @PortalId,
        [PermissionId]         = @PermissionId,
        [RoleId]               = @RoleId,
        [AllowAccess]          = @AllowAccess,
        [UserId]               = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId] = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]   = GetDate()
    WHERE
        [ModulePermissionID]   = @ModulePermissionID
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTabPermission]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabPermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabPermission]
    @TabPermissionId        Int, -- not null!
    @TabId                  Int, -- not null!
    @PermissionId           Int, -- not null!
    @RoleId                 Int, -- might be negative for virtual roles
    @AllowAccess            Bit, -- false: deny, true: grant
    @UserId                 Int, -- -1 is replaced by Null
    @LastModifiedByUserId   Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}TabPermission] SET
        [TabID]                = @TabId,
        [PermissionID]         = @PermissionId,
        [RoleID]               = @RoleId,
        [AllowAccess]          = @AllowAccess,
        [UserID]               = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId] = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]   = GetDate()
    WHERE
        [TabPermissionID]      = @TabPermissionId
GO

ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ALTER COLUMN Header nVarChar(Max)
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ALTER COLUMN Footer nVarChar(Max)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabModules' AND object_id = OBJECT_ID('{objectQualifier}TabModules'))
	ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] DROP CONSTRAINT [IX_{objectQualifier}TabModules] 

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabModules_TabID' AND object_id = OBJECT_ID('{objectQualifier}TabModules'))
	DROP INDEX [IX_{objectQualifier}TabModules_TabID] ON {databaseOwner}[{objectQualifier}TabModules]

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabModules_ModuleID' AND object_id = OBJECT_ID('{objectQualifier}TabModules'))
	DROP INDEX [IX_{objectQualifier}TabModules_ModuleID] ON {databaseOwner}[{objectQualifier}TabModules]

	IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabModules_ModuleOrder' AND object_id = OBJECT_ID('{objectQualifier}TabModules'))
	DROP INDEX [IX_{objectQualifier}TabModules_ModuleOrder] ON {databaseOwner}[{objectQualifier}TabModules]

CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}TabModules_TabID] ON {databaseOwner}[{objectQualifier}TabModules] 
	([TabID], [ModuleID])
	INCLUDE ([IsDeleted], CultureCode, ModuleTitle)
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}TabModules_ModuleID] ON {databaseOwner}[{objectQualifier}TabModules] 
	([ModuleID], [TabID])
	INCLUDE ([IsDeleted], CultureCode, ModuleTitle)
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}TabModules_ModuleOrder] ON {databaseOwner}[{objectQualifier}TabModules] 
	([TabID], [PaneName], [ModuleOrder])
	INCLUDE ([TabModuleID], [ModuleID], [CacheTime], [Alignment], [Color], [Border], [IconFile], [Visibility], [ContainerSrc], 
	         [DisplayTitle], [DisplayPrint], [DisplaySyndicate], [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL],
			 [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [IsDeleted], [CacheMethod], [ModuleTitle],
			 [Header], [Footer], [CultureCode], [UniqueId], [VersionGuid], [DefaultLanguageGuid], [LocalizedVersionGuid]
)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetTabModules]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabModules]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModules]
	@TabId int -- not null!
AS
BEGIN
	SELECT	* 
	FROM {databaseOwner}{objectQualifier}vw_TabModules
	WHERE  TabId = @TabId
	ORDER BY TabId, PaneName, ModuleOrder -- optimized for index used
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetTabModuleOrder]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleOrder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleOrder]
	@TabId    int, 			-- Not Null
	@PaneName nvarchar(50)  -- Not Null
AS
BEGIN
	SELECT *
	FROM {objectQualifier}TabModules 
	WHERE TabId    = @TabId 
	  AND PaneName = @PaneName
	ORDER BY TabId, PaneName, ModuleOrder -- optimized for index used
END
GO

-- DNN-4310
IF EXISTS (SELECT * FROM Sys.Views WHERE (name = N'{objectQualifier}vw_Lists'))
DROP VIEW {databaseOwner}[{objectQualifier}vw_Lists]
GO	
-- optimized
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Lists]
AS
	SELECT  L.EntryID, 
		L.ListName, 
		L.[Value], 
		L.Text, 
		L.[Level], 
		L.SortOrder, 
		L.DefinitionID, 
		L.ParentID, 
		L.Description, 
		L.PortalID, 
		L.SystemList, 
		{databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'ParentKey',  0) AS ParentKey, 
		{databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'Parent',     0) AS Parent, 
		{databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'ParentList', 0) AS ParentList,
		S.MaxSortOrder,
		S.EntryCount,
		CASE WHEN EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}Lists] WHERE (ParentID = L.EntryID)) THEN 1 ELSE 0 END AS HasChildren, 
		L.CreatedByUserID, 
		L.CreatedOnDate, 
		L.LastModifiedByUserID, 
		L.LastModifiedOnDate
	FROM {databaseOwner}[{objectQualifier}Lists] AS L
	LEFT JOIN (SELECT ListName, ParentID, Max(SortOrder) AS MaxSortOrder, Count(1) AS EntryCount 
			   FROM {databaseOwner}[{objectQualifier}Lists] GROUP BY ListName, ParentID) S 		ON L.ParentID = S.ParentId AND L.ListName = S.ListName
GO

-- CONTENT-2224
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFiles]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
    @FolderID Int,                      -- not null!
    @RetrieveUnpublishedFiles Bit = 0   -- include files, hidden by status or date?
AS
	IF @RetrieveUnpublishedFiles = 0 
	BEGIN
		SELECT
			F.FileId,
			F.PortalId,
			F.[FileName],
			F.Extension,
			F.[Size],
			F.Width,
			F.Height,
			F.ContentType,
			F.FolderID,
			FO.FolderPath AS 'Folder',
			FO.StorageLocation,
			FO.IsCached,
			FO.FolderMappingID,
			F.UniqueId,
			F.VersionGuid,
			F.SHA1Hash,
			F.LastModificationTime,
			F.Title,
			F.EnablePublishPeriod,
			F.StartDate,
			F.EndDate,
			F.CreatedByUserID,
			F.CreatedOnDate,
			F.LastModifiedByUserID,
			F.LastModifiedOnDate,
			F.PublishedVersion,
			F.ContentItemID
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] F
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] FO ON F.FolderID = FO.FolderID
		WHERE F.FolderID = @FolderID
		ORDER BY [FolderID], [FileName]
	END
	ELSE BEGIN
		SELECT
			F.FileId,
			F.PortalId,
			F.[FileName],
			F.Extension,
			F.[Size],
			F.Width,
			F.Height,
			F.ContentType,
			F.FolderID,
			FO.FolderPath AS 'Folder',
			FO.StorageLocation,
			FO.IsCached,
			FO.FolderMappingID,
			F.UniqueId,
			F.VersionGuid,
			F.SHA1Hash,
			F.LastModificationTime,
			F.Title,
			F.EnablePublishPeriod,
			F.StartDate,
			F.EndDate,
			F.CreatedByUserID,
			F.CreatedOnDate,
			F.LastModifiedByUserID,
			F.LastModifiedOnDate,
			F.PublishedVersion,
			F.ContentItemID
		FROM {databaseOwner}[{objectQualifier}vw_Files] F
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] FO ON F.FolderID = FO.FolderID
		WHERE F.FolderID = @FolderID
		ORDER BY [FolderID], [FileName]
	END
GO

--DNN-4701
 
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}vw_CoreMessaging_Messages') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}{objectQualifier}vw_CoreMessaging_Messages
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_CoreMessaging_Messages]
AS
	SELECT
		M.MessageID, 
		M.PortalID, 
		M.NotificationTypeID, 
		M.[To], 
		M.[From],
		M.Subject,
		M.Body,
		M.ConversationID, 
		M.ReplyAllAllowed, 
		M.SenderUserID,
		M.ExpirationDate, 
        M.Context, 
		M.IncludeDismissAction,
		M.CreatedByUserID, 
		M.CreatedOnDate, 
		M.LastModifiedByUserID, 
		M.LastModifiedOnDate, 
		MR.RecipientID,
		MR.UserID, 
        MR.[Read], 
		MR.Archived, 
		MR.EmailSent, 
		MR.EmailSentDate, 
		MR.EmailSchedulerInstance
	FROM       {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR
	INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          M ON mr.MessageID = m.MessageID
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}CoreMessaging_CheckReplyHasRecipients]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CheckReplyHasRecipients]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}CoreMessaging_CheckReplyHasRecipients
	@ConversationId Int, -- Not Null
	@UserId 		Int  -- Not Null
AS 
BEGIN
	SELECT COUNT(M.UserID)
	FROM       {databaseOwner}{objectQualifier}vw_CoreMessaging_Messages AS M
	INNER JOIN {databaseOwner}{objectQualifier}vw_Users AS U ON M.UserID = U.UserID AND M.PortalID = IsNull(U.PortalID, M.PortalID)
	WHERE (M.MessageID = @ConversationId) 
	  AND (M.UserID   <> @UserId) 
	  AND (U.IsDeleted = 0)
END
GO

IF EXISTS (SELECT * FROM Sys.Views WHERE (name = N'{objectQualifier}vw_Users'))
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Users]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Users]
AS
	SELECT  U.UserId,
        UP.PortalId,
        U.Username,
        U.FirstName,
        U.LastName,
        U.DisplayName,
        U.IsSuperUser,
        U.Email,
        UP.VanityUrl,
        U.AffiliateId,
        IsNull(UP.IsDeleted, U.IsDeleted) AS IsDeleted,
        UP.RefreshRoles,
        U.LastIPAddress,
        U.UpdatePassword,
        U.PasswordResetToken,
        U.PasswordResetExpiration,
        UP.Authorised,
        U.CreatedByUserId,
        U.CreatedOnDate,
        U.LastModifiedByUserId,
        U.LastModifiedOnDate
	FROM       {databaseOwner}[{objectQualifier}Users]       AS U
		LEFT JOIN {databaseOwner}[{objectQualifier}UserPortals] AS UP 
			ON CASE WHEN U.IsSuperuser = 1 THEN 0 ELSE U.UserId END = UP.UserId
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/