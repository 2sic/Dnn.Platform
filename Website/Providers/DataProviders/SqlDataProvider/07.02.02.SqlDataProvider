/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/***** Task DNN-DNN-3371: update sp Journal_Get to can check security setting, also update func Journal_User_Permissions to get correct role info. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Get]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Get
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
	@PortalId int,
	@CurrentUserId int,
	@JournalId int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0,
    @SecurityCheck BIT = 0
	AS
	SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, ContentItemId, j.ItemData, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM       	{databaseOwner}[{objectQualifier}Journal] AS j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId
                INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] AS js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey OR @SecurityCheck = 0
                LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (j.JournalId = @JournalId AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (j.JournalId = @JournalId))
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_User_Permissions]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
(
	@PortalId int,
	@UserId int,
	@RegisteredRoleId int
)
RETURNS 
@tmp TABLE (seckey nvarchar(200))

AS
BEGIN
IF @UserId > 0
		BEGIN
            IF @RegisteredRoleId = 1
				SELECT @RegisteredRoleId = RegisteredRoleId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalId
			INSERT INTO @tmp (seckey) VALUES ('U' + Cast(@UserId as nvarchar(200)))
			INSERT INTO @tmp (seckey) VALUES ('P' + Cast(@UserId as nvarchar(200)))
			INSERT INTO @tmp (seckey) VALUES ('F' + Cast(@UserId as nvarchar(200)))
			IF EXISTS(SELECT RoleId FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID = @UserId AND RoleId = @RegisteredRoleId
						AND    (EffectiveDate <= getdate() or EffectiveDate is null)
						AND    (ExpiryDate >= getdate() or ExpiryDate is null))
					INSERT INTO @tmp (seckey) VALUES ('C')
			
		END
		
	INSERT INTO @tmp (seckey) VALUES ('E')
	
	INSERT INTO @tmp (seckey)
	SELECT 'R' + CAST(ur.RoleId as nvarchar(200)) 
		FROM {databaseOwner}[{objectQualifier}UserRoles] as ur
			INNER JOIN {databaseOwner}[{objectQualifier}Users] as u on ur.UserId = u.UserId
			INNER JOIN {databaseOwner}[{objectQualifier}Roles] as r on ur.RoleId = r.RoleId
		WHERE  u.UserId = @UserId
			AND    r.PortalId = @PortalId
			AND    (EffectiveDate <= getdate() or EffectiveDate is null)
			AND    (ExpiryDate >= getdate() or ExpiryDate is null)
	INSERT INTO @tmp (seckey)
		SELECT (SELECT CASE WHEN @UserID = ur.UserId 
						THEN 'F' + CAST(RelatedUserID as nvarchar(200))
						ELSE 'F' + CAST(ur.UserId as nvarchar(200)) END) 
		FROM {databaseOwner}[{objectQualifier}UserRelationships] ur
		INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r ON ur.RelationshipID = r.RelationshipID AND r.RelationshipTypeID = 1
		WHERE (ur.UserId = @UserId OR RelatedUserID = @UserId) AND Status = 2
	RETURN 
END

GO

-- DNN-4537:
-- Optimize Indexes on DesktopModulePermission table:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}DesktopModulePermission] DROP CONSTRAINT [IX_{objectQualifier}DesktopModulePermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission_DesktopModules' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	DROP INDEX [IX_{objectQualifier}DesktopModulePermission_DesktopModules] ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}DesktopModulePermission_DesktopModules ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
	(PortalDesktopModuleID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission_Users' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	DROP INDEX [IX_{objectQualifier}DesktopModulePermission_Users] ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}DesktopModulePermission_Users ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
	(UserID, PortalDesktopModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}DesktopModulePermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}DesktopModulePermission'))
	DROP INDEX [IX_{objectQualifier}DesktopModulePermission_Roles] ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}DesktopModulePermission_Roles ON {databaseOwner}[{objectQualifier}DesktopModulePermission]
	(RoleID, PortalDesktopModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


-- Optimize Indexes on FolderPermission table:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}FolderPermission] DROP CONSTRAINT [IX_{objectQualifier}FolderPermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission_Folders' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	DROP INDEX [IX_{objectQualifier}FolderPermission_Folders] ON {databaseOwner}[{objectQualifier}FolderPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}FolderPermission_Folders ON {databaseOwner}[{objectQualifier}FolderPermission]
	(FolderID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission_Users' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	DROP INDEX [IX_{objectQualifier}FolderPermission_Users] ON {databaseOwner}[{objectQualifier}FolderPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}FolderPermission_Users ON {databaseOwner}[{objectQualifier}FolderPermission]
	(UserID, FolderID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}FolderPermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}FolderPermission'))
	DROP INDEX [IX_{objectQualifier}FolderPermission_Roles] ON {databaseOwner}[{objectQualifier}FolderPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}FolderPermission_Roles ON {databaseOwner}[{objectQualifier}FolderPermission]
	(RoleID, FolderID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


-- Optimize Indexes on ModulePermission table:
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}ModulePermission] DROP CONSTRAINT [IX_{objectQualifier}ModulePermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Modules' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Modules] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Modules ON {databaseOwner}[{objectQualifier}ModulePermission]
	(ModuleID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Users' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Users] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Users ON {databaseOwner}[{objectQualifier}ModulePermission]
	(UserID, ModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Roles] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Roles ON {databaseOwner}[{objectQualifier}ModulePermission]
	(RoleID, ModuleID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


-- Optimize Indexes on TabPermission table: remove redundant index on tabPermission table, optimize indexes
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}TabPermission] DROP CONSTRAINT [IX_{objectQualifier}TabPermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission_Tabs' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	DROP INDEX [IX_{objectQualifier}TabPermission_Tabs] ON {databaseOwner}[{objectQualifier}TabPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}TabPermission_Tabs ON {databaseOwner}[{objectQualifier}TabPermission]
	(TabID, PermissionID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO


IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission_Users' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	DROP INDEX [IX_{objectQualifier}TabPermission_Users] ON {databaseOwner}[{objectQualifier}TabPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}TabPermission_Users ON {databaseOwner}[{objectQualifier}TabPermission]
	(UserID, TabID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO


IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}TabPermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}TabPermission'))
	DROP INDEX [IX_{objectQualifier}TabPermission_Roles] ON {databaseOwner}[{objectQualifier}TabPermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}TabPermission_Roles ON {databaseOwner}[{objectQualifier}TabPermission]
	(RoleID, TabID, PermissionID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO

-- DNN-4331: optimized
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRolesByUser]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRolesByUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRolesByUser]
    @UserId        Int, -- not Null!
    @PortalId      Int  -- not Null!
AS
BEGIN
    SELECT RoleName,
           RoleID
    FROM {databaseOwner}[{objectQualifier}Vw_UserRoles]
    WHERE  (UserID   = @UserId)
      AND  (PortalID = @PortalId)
      AND  (IsNull(EffectiveDate, GetDate()) <= GetDate())
      AND  (IsNull(ExpiryDate,    GetDate()) >= GetDate())
END
GO

-- DNN-4325: optimized
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUsersByProfileProperty]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByProfileProperty]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByProfileProperty] -- for admin use only (no property visibility check)
    @PortalId       Int,            -- Null|-1: all Portals
    @PropertyName   nVarChar(256),  -- name of profile property to search in
    @PropertyValue  nVarChar(256),  -- pattern for property value, supports SQL wildcards
    @PageIndex      Int,            -- Page number starting with 0
    @PageSize       Int,            -- number of items per page
    @IncludeDeleted Bit,            -- include soft deleted users
    @SuperUsersOnly Bit             -- return host users only
AS
    DECLARE @MasterPortalId  Int
BEGIN
    SET @MasterPortalId = {databaseOwner}{objectQualifier}MasterPortalId(@PortalId) -- local variable prevents parameter sniffing!

    DECLARE @DataTypeName   nVarChar(100) = Null
    DECLARE @PropertyDefId  Int = Null -- In MasterPortal
    SELECT TOP(1) @PropertyDefId = D.PropertyDefinitionId, @DataTypeName = L.Value
        FROM {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] D INNER JOIN {databaseOwner}[{objectQualifier}Lists] L ON D.DataType = L.EntryID
        WHERE PropertyName LIKE @PropertyName AND (IsNull(D.PortalID, -1) = IsNull(@MasterPortalId, -1) OR (IsNull(@PortalID, -1) = -1))
        ORDER BY D.PortalID DESC; -- prefer portal specific properties

    IF IsNull(@PropertyDefId,0) = 0 OR  IsNull(@DataTypeName,'') = '' -- property not found
        SELECT Null
     ELSE IF @DataTypeName Like 'List' BEGIN
            WITH OrderedUsers AS (
                SELECT U.*, UP.PropertyValue, ROW_NUMBER() OVER (ORDER BY U.DisplayName ASC, U.UserID ASC, U.PortalID DESC) AS RowNum
                FROM       {databaseOwner}[{objectQualifier}vw_Users]     U 
				INNER JOIN {databaseOwner}[{objectQualifier}UserProfile] UP ON U.UserID = UP.UserID
                INNER JOIN {databaseOwner}[{objectQualifier}Lists]        L ON UP.PropertyValue = L.Value AND L.ListName = @PropertyName
                WHERE  ((L.Text LIKE @PropertyValue) OR (@PropertyValue Is Null))
                    AND IsNull(IsDeleted,   0) <= @IncludeDeleted --less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
                    AND IsNull(IsSuperUser, 0) >= @SuperUsersOnly
                    AND (U.PortalID = @MasterPortalId OR (IsNull(@MasterPortalId, -1) = -1))
                    AND (UP.PropertyDefinitionID = @PropertyDefId))
                SELECT * FROM OrderedUsers WHERE RowNum >= {databaseOwner}{objectQualifier}PageLowerBound(@PageIndex, @Pagesize)
                                             AND RowNum <= {databaseOwner}{objectQualifier}PageUpperBound(@PageIndex, @Pagesize) ORDER BY RowNum;

                SELECT  COUNT(1) AS TotalRecords
                FROM    {databaseOwner}[{objectQualifier}vw_Users] U INNER JOIN {databaseOwner}[{objectQualifier}UserProfile] UP ON U.UserID = UP.UserID
                INNER JOIN {databaseOwner}[{objectQualifier}Lists] L ON UP.PropertyValue = L.Value AND L.ListName = @PropertyName
                WHERE  ((UP.PropertyValue LIKE @PropertyValue) OR (@PropertyValue Is Null))
                    AND IsNull(IsDeleted,   0) <= @IncludeDeleted
                    AND IsNull(IsSuperUser, 0) >= @SuperUsersOnly
                    AND (U.PortalID = @MasterPortalId OR (IsNull(@MasterPortalId, -1) = -1))
                    AND (UP.PropertyDefinitionID = @PropertyDefId)
            END
         ELSE BEGIN
            WITH OrderedUsers AS (
                SELECT U.*, UP.PropertyValue, ROW_NUMBER() OVER (ORDER BY U.DisplayName ASC, U.UserID ASC, U.PortalID DESC) AS RowNum
                FROM    {databaseOwner}[{objectQualifier}vw_Users] U INNER JOIN {databaseOwner}[{objectQualifier}UserProfile] UP ON U.UserID = UP.UserID
                WHERE  ((UP.PropertyValue LIKE @PropertyValue) OR (@PropertyValue Is Null))
                    AND IsNull(IsDeleted,   0) <= @IncludeDeleted   --less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
                    AND IsNull(IsSuperUser, 0) >= @SuperUsersOnly
                    AND (U.PortalId = @MasterPortalId OR (IsNull(@MasterPortalId, -1) = -1))
                    AND (UP.PropertyDefinitionID = @PropertyDefId))
                SELECT * FROM OrderedUsers WHERE RowNum >= {databaseOwner}{objectQualifier}PageLowerBound(@PageIndex, @Pagesize)
                                             AND RowNum <= {databaseOwner}{objectQualifier}PageUpperBound(@PageIndex, @Pagesize) ORDER BY RowNum;

                SELECT  COUNT(1) AS TotalRecords
                FROM    {databaseOwner}[{objectQualifier}vw_Users] U INNER JOIN {databaseOwner}[{objectQualifier}UserProfile] UP ON U.UserId = UP.UserId
                WHERE  ((UP.PropertyValue LIKE @PropertyValue) OR (@PropertyValue Is Null))
                    AND IsNull(IsDeleted,   0) <= @IncludeDeleted
                    AND IsNull(IsSuperUser, 0) >= @SuperUsersOnly
                    AND (U.PortalID = @MasterPortalId OR (IsNull(@MasterPortalId, -1) = -1))
                    AND (UP.PropertyDefinitionID = @PropertyDefId)
            END
END
GO

-- DNN-4319: Optimized
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]
    @TabId Int -- Not Null!
AS
    SELECT MP.*
    FROM        {databaseOwner}[{objectQualifier}Tabs]                 AS T
    INNER JOIN  {databaseOwner}[{objectQualifier}TabModules]           AS TM ON TM.TabID    = T.TabID
    INNER JOIN  {databaseOwner}[{objectQualifier}vw_ModulePermissions] AS MP ON TM.ModuleID = MP.ModuleID AND T.PortalID = MP.PortalID
    WHERE T.TabID = @TabId
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/