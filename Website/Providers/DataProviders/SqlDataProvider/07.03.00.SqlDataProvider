/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* CONTENT-2259 Web Server Groups */
/**********************************/

IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = '{objectQualifier}WebServers' 
           AND  COLUMN_NAME = 'ServerGroup')
   BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}WebServers ADD
            ServerGroup nvarchar(200) NULL
    END 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateServer]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateServer]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateServer]
    @ServerID            int,
    @URL                nvarchar(255),
    @Enabled            bit,
    @Group                nvarchar(200)
AS
    UPDATE {databaseOwner}{objectQualifier}WebServers
        SET 
            URL = @URL,
            Enabled = @Enabled,
            ServerGroup = @Group
        WHERE  ServerID = @ServerID
GO

/***** Task DNN-DNN-3371: update sp Journal_Get to can check security setting, also update func Journal_User_Permissions to get correct role info. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Get]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Get
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
    @PortalId int,
    @CurrentUserId int,
    @JournalId int,
    @IncludeAllItems int = 0,
    @IsDeleted int = 0,
    @SecurityCheck BIT = 0
    AS
    SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
                j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
                "JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
                "JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
                "JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
                 jt.Icon, jt.JournalType,
                "Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
                jd.JournalXML, ContentItemId, j.ItemData, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
    FROM        {databaseOwner}[{objectQualifier}Journal] AS j
                INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId
                INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] AS js ON js.JournalId = j.JournalId
                INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey OR @SecurityCheck = 0
                LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId 
                LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID 
                LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
    WHERE       ((@IncludeAllItems = 0) AND (j.JournalId = @JournalId AND j.IsDeleted = @IsDeleted)) 
                OR 
                ((@IncludeAllItems = 1) AND (j.JournalId = @JournalId))
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_User_Permissions]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
(
    @PortalId int,
    @UserId int,
    @RegisteredRoleId int
)
RETURNS 
@tmp TABLE (seckey nvarchar(200))

AS
BEGIN
IF @UserId > 0
        BEGIN
            IF @RegisteredRoleId = 1
                SELECT @RegisteredRoleId = RegisteredRoleId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalId
            INSERT INTO @tmp (seckey) VALUES ('U' + Cast(@UserId as nvarchar(200)))
            INSERT INTO @tmp (seckey) VALUES ('P' + Cast(@UserId as nvarchar(200)))
            INSERT INTO @tmp (seckey) VALUES ('F' + Cast(@UserId as nvarchar(200)))
            IF EXISTS(SELECT RoleId FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID = @UserId AND RoleId = @RegisteredRoleId
                        AND    (EffectiveDate <= getdate() or EffectiveDate is null)
                        AND    (ExpiryDate >= getdate() or ExpiryDate is null))
                    INSERT INTO @tmp (seckey) VALUES ('C')
            
        END
        
    INSERT INTO @tmp (seckey) VALUES ('E')
    
    INSERT INTO @tmp (seckey)
    SELECT 'R' + CAST(ur.RoleId as nvarchar(200)) 
        FROM {databaseOwner}[{objectQualifier}UserRoles] as ur
            INNER JOIN {databaseOwner}[{objectQualifier}Users] as u on ur.UserId = u.UserId
            INNER JOIN {databaseOwner}[{objectQualifier}Roles] as r on ur.RoleId = r.RoleId
        WHERE  u.UserId = @UserId
            AND    r.PortalId = @PortalId
            AND    (EffectiveDate <= getdate() or EffectiveDate is null)
            AND    (ExpiryDate >= getdate() or ExpiryDate is null)
    INSERT INTO @tmp (seckey)
        SELECT (SELECT CASE WHEN @UserID = ur.UserId 
                        THEN 'F' + CAST(RelatedUserID as nvarchar(200))
                        ELSE 'F' + CAST(ur.UserId as nvarchar(200)) END) 
        FROM {databaseOwner}[{objectQualifier}UserRelationships] ur
        INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r ON ur.RelationshipID = r.RelationshipID AND r.RelationshipTypeID = 1
        WHERE (ur.UserId = @UserId OR RelatedUserID = @UserId) AND Status = 2
    RETURN 
END

GO

/* DNN-5107 Improve Startup Performance - Cache Settings */
/*********************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabSettings]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabSettings]
    @PortalId Int
AS
	BEGIN
		SELECT
			TS.TabID,
			TS.SettingName,
			CASE WHEN Lower(TS.SettingValue) LIKE 'fileid=%'
				 THEN {databaseOwner}{objectQualifier}FilePath(TS.SettingValue)
				 ELSE TS.SettingValue END           
				 AS SettingValue
		FROM   {databaseOwner}[{objectQualifier}TabSettings] TS
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] T ON t.TabID = TS.TabID
		WHERE  (PortalId = @PortalId)
		ORDER BY TS.TabID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetModuleSettingsByTab]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSettingsByTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSettingsByTab]
    @TabId Int
AS
	BEGIN
		SELECT
			MS.ModuleID,
			MS.SettingName,
			CASE WHEN Lower(MS.SettingValue) LIKE 'fileid=%'
				 THEN {databaseOwner}{objectQualifier}FilePath(MS.SettingValue)
				 ELSE MS.SettingValue END           
				 AS SettingValue
		FROM   {databaseOwner}[{objectQualifier}ModuleSettings] MS
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] TM ON MS.ModuleID = TM.ModuleID
		WHERE  TM.TabID = @TabId
		ORDER BY MS.ModuleID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabModuleSettingsByTab]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSettingsByTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSettingsByTab]
    @TabId Int
AS
	BEGIN
		SELECT
			TMS.TabModuleID,
			TMS.SettingName,
			CASE WHEN Lower(TMS.SettingValue) LIKE 'fileid=%'
				 THEN {databaseOwner}{objectQualifier}FilePath(TMS.SettingValue)
				 ELSE TMS.SettingValue END           
				 AS SettingValue
		FROM   {databaseOwner}[{objectQualifier}TabModuleSettings] TMS
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] TM ON TMS.TabModuleID = TM.TabModuleID
		WHERE  TM.TabID = @TabId
		ORDER BY TMS.TabModuleID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabsByTabModuleID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByTabModuleID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByTabModuleID]
	@TabModuleID Int -- NOT Null
AS
	BEGIN
		SELECT * FROM {databaseOwner}[{objectQualifier}vw_Tabs] T
		WHERE IsDeleted = 0
		  AND TabID IN (SELECT TabID FROM {databaseOwner}[{objectQualifier}TabModules]
						WHERE TabModuleID = @TabModuleID AND IsDeleted = 0)
		ORDER BY PortalId, Level, ParentID, TabOrder -- PortalId added for query optimization
	END
GO

/***** Fix bug Content-2390: Add log type WEBSERVER_CREATED, WEBSERVER_UPDATED *****/
INSERT INTO {databaseOwner}[{objectQualifier}EventLogTypes] ([LogTypeKey], [LogTypeFriendlyName], [LogTypeDescription], [LogTypeOwner], [LogTypeCSSClass]) VALUES (N'WEBSERVER_CREATED', N'Web Server Created', N'', N'DotNetNuke.Logging.EventLogType', N'ItemUpdated')
INSERT INTO {databaseOwner}[{objectQualifier}EventLogTypes] ([LogTypeKey], [LogTypeFriendlyName], [LogTypeDescription], [LogTypeOwner], [LogTypeCSSClass]) VALUES (N'WEBSERVER_UPDATED', N'Web Server Updated', N'', N'DotNetNuke.Logging.EventLogType', N'ItemUpdated')

INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) VALUES (N'WEBSERVER_CREATED', NULL, 1, 10, 0, 1, 1, 1, N'', N'')
INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) VALUES (N'WEBSERVER_UPDATED', NULL, 1, 10, 0, 1, 1, 1, N'', N'')
GO

/* DNN-5126 Need AffiliateController.GetAffiliate(int affiliateID) */
/*******************************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAffiliate]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAffiliate]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAffiliate]
	@AffiliateId int
AS

	SELECT	*
	FROM	{databaseOwner}{objectQualifier}Affiliates 
	WHERE	AffiliateId = @AffiliateId
GO

/* DNN-4993 Scheduled Job Start Date and Time */
/*********************************************************/

ALTER TABLE {databaseOwner}{objectQualifier}Schedule
	ADD ScheduleStartDate datetime NULL 
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateSchedule]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateSchedule]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateSchedule
	@ScheduleID int
	,@TypeFullName varchar(200)
	,@TimeLapse int
	,@TimeLapseMeasurement varchar(2)
	,@RetryTimeLapse int
	,@RetryTimeLapseMeasurement varchar(2)
	,@RetainHistoryNum int
	,@AttachToEvent varchar(50)
	,@CatchUpEnabled bit
	,@Enabled bit
	,@ObjectDependencies varchar(300)
	,@Servers varchar(150)
	,@LastModifiedByUserID	int
	,@FriendlyName varchar(200)
	,@ScheduleStartDate datetime
AS
UPDATE dbo.Schedule
	SET 
	TypeFullName = @TypeFullName
	,FriendlyName = @FriendlyName
	,TimeLapse = @TimeLapse
	,TimeLapseMeasurement = @TimeLapseMeasurement
	,RetryTimeLapse = @RetryTimeLapse
	,RetryTimeLapseMeasurement = @RetryTimeLapseMeasurement
	,RetainHistoryNum = @RetainHistoryNum
	,AttachToEvent = @AttachToEvent
	,CatchUpEnabled = @CatchUpEnabled
	,Enabled = @Enabled
	,ObjectDependencies = @ObjectDependencies
	,Servers = @Servers,
	[LastModifiedByUserID] = @LastModifiedByUserID,	
	[LastModifiedOnDate] = getdate(),
	ScheduleStartDate = @ScheduleStartDate
	WHERE ScheduleID = @ScheduleID
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddSchedule]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}AddSchedule]
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}AddSchedule

	@TypeFullName varchar(200)
	,@TimeLapse int
	,@TimeLapseMeasurement varchar(2)
	,@RetryTimeLapse int
	,@RetryTimeLapseMeasurement varchar(2)
	,@RetainHistoryNum int
	,@AttachToEvent varchar(50)
	,@CatchUpEnabled bit
	,@Enabled bit
	,@ObjectDependencies varchar(300)
	,@Servers varchar(150)
	,@CreatedByUserID	int
	,@FriendlyName varchar(200)
	,@ScheduleStartDate datetime
AS
	INSERT INTO dbo.Schedule
		(TypeFullName
		,TimeLapse
		,TimeLapseMeasurement
		,RetryTimeLapse
		,RetryTimeLapseMeasurement
		,RetainHistoryNum
		,AttachToEvent
		,CatchUpEnabled
		,Enabled
		,ObjectDependencies
		,Servers
		,FriendlyName
		,[CreatedByUserID]
		,[CreatedOnDate]
		,[LastModifiedByUserID]
		,[LastModifiedOnDate]
		,ScheduleStartDate
		)
	VALUES
		(@TypeFullName
		,@TimeLapse
		,@TimeLapseMeasurement
		,@RetryTimeLapse
		,@RetryTimeLapseMeasurement
		,@RetainHistoryNum
		,@AttachToEvent
		,@CatchUpEnabled
		,@Enabled
		,@ObjectDependencies
		,@Servers
		,@FriendlyName
		,@CreatedByUserID
		,getdate()
		,@CreatedByUserID
		,getdate()
		,@ScheduleStartDate
		)
GO

/* DNN-4991 Scheduler main view */
/********************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetSchedule]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetSchedule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSchedule
 @Server varchar(150)
AS
BEGIN
SELECT
  S.*
  , (SELECT max(S1.NextStart)
   FROM {databaseOwner}{objectQualifier}ScheduleHistory S1
   WHERE S1.ScheduleID = S.ScheduleID) as NextStart
 FROM {databaseOwner}{objectQualifier}Schedule S
 WHERE
  (@Server IS NULL OR S.Servers LIKE '%,' + @Server + ',%' OR S.Servers IS NULL)
  ORDER BY FriendlyName ASC
END
GO
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/