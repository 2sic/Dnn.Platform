/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/***** DNN-6547: update sp EnsureLocalizationExists to set master language value in "neither default nor system language available" case. *****/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EnsureLocalizationExists]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}EnsureLocalizationExists]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EnsureLocalizationExists]
	@PortalID       Int,
	@CultureCode	nvarchar(10)
AS
BEGIN
	DECLARE @MasterLanguage nvarchar(10) = Null;
	DECLARE @LocalizationExists bit = 0;

	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Languages] L 
					JOIN {databaseOwner}[{objectQualifier}PortalLanguages] P ON L.LanguageID = P.LanguageID 
					WHERE P.PortalID = @PortalID AND L.CultureCode = @CultureCode)
		RETURN; -- language does not exist for this portal

	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
				WHERE CultureCode = @CultureCode AND PortalID = @PortalID)
		RETURN; -- already localized
	
	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] L
					JOIN {databaseOwner}[{objectQualifier}Portals] P ON L.PortalID = P.PortalID AND L.CultureCode = P.DefaultLanguage
					WHERE P.PortalID = @PortalID)
		SELECT @MasterLanguage = DefaultLanguage 
		FROM {databaseOwner}[{objectQualifier}Portals] 
		WHERE PortalID = @PortalID
	ELSE IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
					WHERE CultureCode = 'en-US' and PortalID = @PortalID)
		SET @MasterLanguage = 'en-US'
	ELSE -- neither default nor system language available: take the language that was assigned first
		SELECT TOP (1) @MasterLanguage = CultureCode 
		FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
		WHERE PortalID = @PortalID 
		ORDER BY PortalID ASC;

	IF NOT (@MasterLanguage Is Null OR @MasterLanguage LIKE @CultureCode) 
	BEGIN  -- copy localized values from (existing and different) master language:					
		INSERT INTO {databaseOwner}[{objectQualifier}PortalLocalization]
		(	PortalId,
			CultureCode,
			PortalName,
			LogoFile,
			FooterText,
			Description,
			KeyWords,
			BackgroundFile, 
			HomeTabId,
			LoginTabId,
			UserTabId,
			AdminTabId,
			RegisterTabId,
			SearchTabId,
			Custom404TabId,
			Custom500TabId,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		) SELECT
			PortalId,
			@CultureCode,
			PortalName,
			LogoFile,
			FooterText,
			Description,
			KeyWords,
			BackgroundFile, 
			HomeTabId,
			LoginTabId,
			UserTabId,
			AdminTabId,
			RegisterTabId,
			SearchTabId,
			Custom404TabId,
			Custom500TabId,
			-1,
			GETDATE(),
			-1,
			GETDATE()
		 FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
		 WHERE PortalID = @PortalID AND CultureCode = @MasterLanguage;
	
		-- copy missing localized settings:
		DECLARE	
			@LocalPortalSettings TABLE(
		    [PortalID]             INT             NOT NULL,
		    [CultureCode]          NVARCHAR (10)   NOT NULL,
		    [SettingName]          NVARCHAR (50)   NOT NULL,
		    [SettingValue]         NVARCHAR (2000) NULL
		);

		INSERT INTO @LocalPortalSettings
		(
			PortalID,
			CultureCode,
			SettingName,
			SettingValue
		)
		SELECT
			PortalID,
			CultureCode,
			SettingName,
			SettingValue
		FROM {databaseOwner}[{objectQualifier}PortalSettings]
		WHERE PortalID = @PortalID AND CultureCode = @CultureCode

		MERGE INTO @LocalPortalSettings target
		USING (SELECT * FROM {databaseOwner}[{objectQualifier}PortalSettings]
				WHERE PortalId = @PortalID and CultureCode = @MasterLanguage) source 
		ON (target.SettingName = source.SettingName)
		WHEN NOT MATCHED THEN 
			INSERT (  
				PortalID,   
				CultureCode,   
				SettingName,   
				SettingValue) 
			VALUES (
				source.PortalID, 
				@CultureCode, 
				source.SettingName, 
				source.SettingValue
			);

		MERGE INTO {databaseOwner}[{objectQualifier}PortalSettings]  target
		USING (SELECT * FROM @LocalPortalSettings) source 
		ON (target.PortalID = source.PortalID AND 
			target.CultureCode = source.CultureCode AND 
			target.SettingName = source.SettingName)
		WHEN NOT MATCHED THEN 
			INSERT (  
				PortalID,   
				CultureCode,   
				SettingName,   
				SettingValue,
				CreatedByUserID, 
				CreatedOnDate, 
				LastModifiedByUserID, 
				LastModifiedOnDate) 
			VALUES (
				source.PortalID, 
				@CultureCode, 
				source.SettingName, 
				source.SettingValue,
				-1,
				GETDATE(),
				-1,
				GETDATE()
			);
	END;
END
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}JavaScriptLibraries]') AND name = 'Version' AND max_length = 64)
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}JavaScriptLibraries]
			ALTER COLUMN [Version] [nvarchar](32) NOT NULL;
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]
	@JavaScriptLibraryID INT,
	@PackageID INT,
	@LibraryName NVARCHAR(200),
	@Version NVARCHAR(32),
	@FileName NVARCHAR(100),
	@ObjectName NVARCHAR(100),
	@PreferredScriptLocation int,
	@CDNPath NVARCHAR(250)
AS

	IF EXISTS (SELECT JavaScriptLibraryID FROM {objectQualifier}JavaScriptLibraries WHERE JavaScriptLibraryID = @JavaScriptLibraryID)
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}JavaScriptLibraries]
			   SET [PackageID] = @PackageID,
					[LibraryName] = @LibraryName,
					[Version] = @Version,
					[FileName] = @FileName,
					[ObjectName] = @ObjectName,
					[PreferredScriptLocation] = @PreferredScriptLocation,
					[CDNPath] = @CDNPath
			 WHERE JavaScriptLibraryID = @JavaScriptLibraryID
	 	END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}[{objectQualifier}JavaScriptLibraries] (
				[PackageID],
				[LibraryName],
				[Version],
				[FileName],
				[ObjectName],
				[PreferredScriptLocation],
				[CDNPath]
			)
			VALUES (
				@PackageID,
				@LibraryName,
				@Version,
				@FileName,
				@ObjectName,
				@PreferredScriptLocation,
				@CDNPath
			)
			SET @JavaScriptLibraryID = (SELECT @@IDENTITY)
		END
		
	SELECT @JavaScriptLibraryID
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
