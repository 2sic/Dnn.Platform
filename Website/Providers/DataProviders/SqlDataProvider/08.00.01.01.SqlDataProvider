/* DNN-4562 */

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
    @MessageID int,         -- message id
    @RoleIDs nvarchar(max), -- comma separated list of RoleIds
	@CreateUpdateUserID INT -- create / update user id
AS
BEGIN    

    INSERT {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients](
			[MessageID],
			[UserID],
			[Read],
			[Archived],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
            )
			SELECT distinct 
			  @MessageID,
			  UserID,
			  0,
			  0,
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE(), -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime
           FROM {databaseOwner}[{objectQualifier}vw_UserRoles] ur
			INNER JOIN {databaseOwner}[{objectQualifier}SplitStrings_CTE](@RoleIDs,',') m on ur.RoleID = m.Item
			WHERE ur.ExpiryDate >= getdate() OR ur.ExpiryDate IS NULL
END
GO

/* DNN-8368 Remove leftover ModuleDefinitions record from module Newsletters */

DELETE 	FROM {databaseOwner}[{objectQualifier}ModuleDefinitions] 
WHERE 	({databaseOwner}[{objectQualifier}ModuleDefinitions].DesktopModuleID NOT IN ( SELECT  DesktopModuleID FROM {databaseOwner}[{objectQualifier}DesktopModules] ))
		AND 
		({databaseOwner}[{objectQualifier}ModuleDefinitions].FriendlyName = 'Newsletters');
		
GO