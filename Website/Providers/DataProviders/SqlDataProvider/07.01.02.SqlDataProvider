/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/*** Fix bug DNN-27669: Filter the user's Deleted flag in SortedUsers table. ***/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch] 
(
    @PortalID int,                          -- portal                
    @UserId int,                            -- for determining correct visibility permissions
    @FilterUserId int,                      -- for filtering relationships on    
    @FilterRoleId int,                      -- for filtering by roles
    @RelationshipTypeId int,                -- for filtering by relationships
    @IsAdmin bit,                           -- determines visibility
    @PageSize int,                          -- page size
    @PageIndex int,                         -- 0 based page index
    @SortBy nvarchar(100),                  -- sort field
    @SortAscending bit,                     -- sort flag indicating whether sort is asc or desc
    @PropertyNames nvarchar(max),           -- list of property names to filter
    @PropertyValues nvarchar(max)           -- list of property values to filter
)
AS
    -- Setup Top XX
    DECLARE @topSql nvarchar(20) SET @topSql = ''
    IF @PageSize > -1 BEGIN SET @topSql = ' TOP ' + CONVERT(nvarchar(20), @PageSize) END
                
    -- Setup Specific Page
    DECLARE @minRowNumberSql nvarchar(20) SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))
    -- Setup Pivot Field List
    DECLARE @pivotSql nvarchar(max) SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

    -- Get User specific columns
    DECLARE @UserColumns TABLE(ColumnName NVARCHAR(100))
    INSERT INTO @UserColumns SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}vw_Users'

    -- Lists Filters names and values into tables
    DECLARE @PropertyNamesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
    DECLARE @PropertyValuesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
    INSERT INTO @PropertyNamesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)                      
    INSERT INTO @PropertyValuesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyValues)
                
    -- Gets filters that are on the User rather than Profile Properties
    DECLARE @UserFiltersTable TABLE (RowNumber Int, RowValue NVARCHAR(MAX))
    INSERT INTO @UserFiltersTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',',@PropertyNames) WHERE RowValue IN (SELECT * FROM @UserColumns)


    DECLARE @sql nvarchar(max) SET @sql = ''
    DECLARE @filterSql nvarchar(max)SET @filterSql = ''

    -- ///////////////////////////////////////////////////
    -- FILTERING by PROFILE PROPERTY or USER PROPERTY
    -- ///////////////////////////////////////////////////
    --IF @PropertyNames IS NOT NULL AND @PropertyNames <> ''
    IF ((SELECT COUNT(*) FROM @PropertyNamesTable) > 0) AND ((SELECT COUNT(*) FROM @PropertyValuesTable)> 0) 
	    BEGIN
            DECLARE @propertyFilter nvarchar(max)
            DECLARE @userFilter nvarchar(max)
            DECLARE @userFilterJoin nvarchar(max) SET @userFilterJoin = ''
            DECLARE @profilePropertyCount INT
            DECLARE @userFilterCount INT
            DECLARE @propertyAndUserFilter nvarchar(10) SET @propertyAndUserFilter = ''
            DECLARE @groupBy NVARCHAR(300)

            -- Filters on Profile Properties    
            ;WITH CTE_PropertyNames(RowNumber, RowValue) AS
            (              SELECT * FROM @PropertyNamesTable
                            WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns)),
            CTE_PropertyValues(RowNumber, RowValue) AS
            (              SELECT * FROM @PropertyValuesTable
                            WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns))

            SELECT @propertyFilter = COALESCE(@propertyFilter + ' OR ' , ' ') 
                                        + ' (PropertyName=''' + N.RowValue 
                                        + ''' AND ((PropertyValue LIKE ''' + V.RowValue +'%'') OR (PropertyValue LIKE ''% ' + V.RowValue +'%'')))'
            FROM CTE_PropertyNames AS N INNER JOIN CTE_PropertyValues AS V ON N.RowNumber = V.RowNumber
                                
            -- Filters on User Property                           
            SELECT @userFilter = COALESCE(@userFilter + ' AND ', ' ')  
										+ ' ((u.' + N.RowValue + ' LIKE ''' + V.RowValue +'%'') OR (u.' + N.RowValue + ' LIKE ''% ' + V.RowValue +'%'')) '
            FROM @UserFiltersTable AS N  INNER JOIN @PropertyValuesTable AS V ON N.RowNumber = V.RowNumber
                                
            SELECT @userFilterCount = COUNT(*) FROM @UserFiltersTable
            IF @userFilterCount > 0 BEGIN SET @userFilterJoin = ' INNER JOIN {objectQualifier}vw_Users u ON u.UserId = p.UserId ' END

            -- Determining the Group By Clause -- dependant on types of filters used
            SELECT @profilePropertyCount = COUNT(*) FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)
            WHERE RowValue IN (SELECT PropertyName FROM {objectQualifier}ProfilePropertyDefinition WHERE PortalID = @PortalId)
            AND RowValue NOT IN (SELECT ColumnName FROM @UserColumns)

            IF @profilePropertyCount > 0
                BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) = ' + CONVERT(nvarchar(20),@profilePropertyCount ) END
            ELSE
                BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) > 0 '     END

            IF ( @profilePropertyCount > 0 AND @userFilterCount > 0)
            BEGIN SET @propertyAndUserFilter = ' AND ' END

            -- CREATE FINAL FILTER
            SET @filterSql = ' DECLARE @MatchingUsers TABLE (UserID INT, Occurrances INT) INSERT INTO @MatchingUsers SELECT p.UserID, COUNT(*) AS occurances ' 
                                        + ' FROM {databaseOwner}{objectQualifier}vw_profile p ' + @userFilterJoin
                                        + ' WHERE ' + COALESCE(' ( ' + @propertyFilter + ') ', ' ') + @propertyAndUserFilter + COALESCE(@userFilter, ' ') 
										+ ' AND ((Visibility = 0) OR (Visibility = 1 AND ' + CONVERT(nvarchar(20), @UserId) + ' > 0) OR (Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1))' 
                                        + @groupBy
		END

        -- ///////////////////////////////////////////////////      
        -- SETUP ROLE AND RELATIONSHIP FILTERS
        -- ///////////////////////////////////////////////////
        DECLARE @roleAndRelationshipFilter nvarchar(1000)
        DECLARE @roleFilter nvarchar(100) SET @roleFilter = ''
        DECLARE @relationshipFilter nvarchar(1000) SET @relationshipFilter = ''
        DECLARE @roleAndRelationshipFlag bit SET @roleAndRelationshipFlag  = 0
        DECLARE @RoleAndRelationshipSelect nvarchar(100) SET @RoleAndRelationshipSelect = ''
                                
        -- Filter by Role
        IF @FilterRoleId <> -1 
            BEGIN
                SET @roleAndRelationshipFlag = 1
                SET @roleFilter = ' JOIN {objectQualifier}UserRoles UR ON U.UserID = UR.UserID AND UR.RoleID = ' + CONVERT(nvarchar(20), @FilterRoleId)
            END

        -- Filter by Relationship
        IF @RelationshipTypeId <> -1  
            BEGIN
                SET @roleAndRelationshipFlag = 1
                SET @relationshipFilter = ' JOIN {objectQualifier}Relationships REL ON REL.PortalID = ' + CONVERT(nvarchar(20), @PortalID)
                                            + ' AND RelationshipTypeID = ' + CONVERT(nvarchar(20), @RelationshipTypeId) 
                                            + ' JOIN {objectQualifier}UserRelationships UREL ON REL.RelationshipID = UREL.RelationshipID AND
                                            ((UREL.UserID = ' + CONVERT(nvarchar(20), @FilterUserId) + ' AND UREL.RelatedUserID = U.UserID) OR
                                            (UREL.UserID = U.UserID AND UREL.RelatedUserID = ' + CONVERT(nvarchar(20), @FilterUserId) + '))'
                                            + ' WHERE UREL.Status = 2'
            END 

        IF @roleAndRelationshipFlag = 1 BEGIN SET @RoleAndRelationshipSelect = ' AND s.UserId IN (SELECT userID FROM  RoleAndRelationUsers) ' END

        SET @roleAndRelationshipFilter =  ', RoleAndRelationUsers AS ( SELECT U.userId FROM {objectQualifier}vw_Users U ' + @roleFilter + @relationshipFilter + ' )' 

        -- ///////////////////////////////////////////////////  
        -- SET UP SORT
        -- ///////////////////////////////////////////////////
        DECLARE @sortSql nvarchar(1000) SET @sortSql = ''
        DECLARE @propertySort nvarchar(1000) SET @propertySort = ''
        DECLARE @filterJoin nvarchar(100) SET @filterJoin = ''
        DECLARE @filterSortSql nvarchar(1000) SET @filterSortSql = ''
        DECLARE @sortByUserProperty BIT         
        SELECT @sortByUserProperty = COUNT(*) FROM @UserColumns WHERE ColumnName = @SortBy

        IF ( @profilePropertyCount > 0 OR @userFilterCount > 0)
	        BEGIN SET @filterJoin = ' INNER JOIN @MatchingUsers m ON m.UserID = s.UserID ' END

        -- Determine the Type of Sort
        IF (@SortBy IS NOT NULL AND @SortBy <> '') AND @sortByUserProperty <> 1
	        BEGIN -- Sort By Profile Property
                SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')
                SET @propertySort = {databaseOwner}{objectQualifier}GetSortSql('PropertyValue',@SortAscending,'UserID')
                SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @propertySort + ' ) AS RowNumber, *  ' 
                                                + ' FROM {objectQualifier}vw_Profile WHERE PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ' AND PropertyName = ''' + @SortBy + ''' )'
                                                + ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
                                                + @filterJoin + ' ) '
	        END
        ELSE
		    BEGIN   
                -- Sort By User Property
                IF @sortByUserProperty = 1 BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')END
                                
                -- Default: Sort By UserID
                ELSE BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql('UserID',@SortAscending,'UserID') END                        
                SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @sortSql + ' ) AS RowNumber, * '
                                                + ' FROM {objectQualifier}vw_Users WHERE (PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ' OR PortalID Is NULL) AND IsDeleted = 0)'
                                                + ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
                                                + @filterJoin + ' ) '
	        END

		-- Check if any Profile Property Definitions exist for this portal
		IF @pivotSql is not null
			BEGIN
				-- SELECT with PIVOT
				SET @pivotSql = 'SELECT * FROM PivotedUsers PIVOT (MAX(PropertyValue) for PropertyName in (' + @pivotSql + ') ) as pivotTable '
			END
		ELSE
			BEGIN
				-- SELECT with DISTINCT
				SET @pivotSql = 'SELECT distinct UserID, PortalID, Username, Email, DisplayName, IsSuperUser, IsDeleted, AffiliateID, UpdatePassword, Authorised FROM PivotedUsers '
			END

        -- ///////////////////////////////////////////////////
        -- CREATE FINAL QUERY
        -- ///////////////////////////////////////////////////
        SET @sql = @filterSql
                + ' DECLARE @TempUsers TABLE (SortOrder INT, UserID INT) '
                + @filterSortSql
                + @roleAndRelationshipFilter
                + ' INSERT INTO @TempUsers SELECT ' + @topSql + ' * FROM (SELECT '
                + ' ROW_NUMBER() OVER ( ORDER BY [RowNumber] ) AS RowNumber, s.UserId FROM MatchingSorted s ' 
                + ' WHERE 1=1 ' + @roleAndRelationshipSelect
				+ ') t WHERE RowNumber >= '+ @minRowNumberSql
                + ' ;WITH PivotedUsers AS ( SELECT U.UserID, U.PortalID, U.Username, U.Email, U.DisplayName, U.IsSuperUser, U.IsDeleted, U.CreatedOnDate,        
                                                U.AffiliateID, U.UpdatePassword, U.Authorised, Prop.PropertyName,
                                                CASE
                                                    WHEN (P.Visibility = 0) THEN P.PropertyValue
                                                    WHEN (P.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN P.PropertyValue
                                                    WHEN (P.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 0 AND ' + CONVERT(nvarchar(20), @UserId) + ' > 0) THEN P.PropertyValue
                                                    WHEN U.UserID = ' + CONVERT(nvarchar(20), @UserId) + ' OR (P.Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN P.PropertyValue
                                                    ELSE NULL
                                                END AS PropertyValue
                                            FROM   {objectQualifier}vw_Users AS U
                                                INNER JOIN {objectQualifier}UserProfile AS P ON U.UserID = P.UserID
                                                LEFT OUTER JOIN {objectQualifier}ProfilePropertyDefinition AS Prop ON 
                                                (Prop.PropertyDefinitionID = P.PropertyDefinitionID and Prop.Deleted = 0 and Prop.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ')
                                            WHERE U.UserId IN (SELECT UserId FROM @TempUsers)
                                            )' +
                @pivotSql + @sortSql            

        EXEC(@sql)
GO

/*** Fix bug DNN-3102: Check the deleted status in sp Journal_GetStatsForGroup. ***/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]
	@PortalId INT,
	@GroupId INT
AS
SELECT Count(j.JournalTypeId) as JournalTypeCount, 
	   jt.JournalType 
	   FROM {databaseOwner}[{objectQualifier}Journal] AS j 
	   INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] AS jt ON jt.JournalTypeId = j.JournalTypeId
	WHERE j.GroupId = @GroupId AND j.PortalId = @PortalId AND j.IsDeleted = 0
	Group BY j.JournalTypeId, jt.JournalType

GO


/* Add audit Columns to TabUrls table */
/**************************************/

ALTER TABLE {databaseOwner}{objectQualifier}TabUrls ADD
	CreatedByUserID int NULL,
	CreatedOnDate datetime NULL,
	LastModifiedByUserID int NULL,
	LastModifiedOnDate datetime NULL
GO

/* Update SaveTabUrl */
/*********************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveTabUrl]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveTabUrl]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabUrl] 
	@TabID				int,
	@SeqNum				int,
	@PortalAliasID		int,
	@PortalAliasUsage	int,
	@Url				nvarchar(200),
	@QueryString		nvarchar(200),
	@CultureCode		nvarchar(50),
	@HttpStatus			nvarchar(50),
	@IsSystem			bit,
	@ModifiedByUserID	int
AS
	IF @HttpStatus = '200'
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}TabUrls
				SET HttpStatus = '301',
				[LastModifiedByUserID]= @ModifiedByUserID,
				[LastModifiedOnDate]= getdate()
				WHERE TabID = @TabID
					AND CultureCode = @CultureCode
					AND (@PortalAliasID = @PortalAliasID OR (PortalAliasId IS NULL AND @PortalAliasID IS NULL))
					AND HttpStatus = '200'
		END  
	IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}TabUrls WHERE TabId = @TabID AND SeqNum = @SeqNum)
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}TabUrls
				SET 
					PortalAliasId = @PortalAliasID,
					PortalAliasUsage = @PortalAliasUsage,
					Url = @Url,
					QueryString = @QueryString,
					CultureCode = @CultureCode,
					HttpStatus = @HttpStatus,
					IsSystem = @IsSystem,
					[LastModifiedByUserID]= @ModifiedByUserID,
					[LastModifiedOnDate]= getdate()
			WHERE TabId = @TabID AND SeqNum = @SeqNum 
		END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}TabUrls
					( TabId ,
					  SeqNum ,
					  Url ,
					  QueryString ,
					  HttpStatus ,
					  CultureCode ,
					  IsSystem,
					  PortalAliasId ,
					  PortalAliasUsage,
					  [CreatedByUserID],
					  [CreatedOnDate],
				  	  [LastModifiedByUserID],
					  [LastModifiedOnDate]
					)
			VALUES  ( @TabID ,
					  @SeqNum ,
					  @Url ,
					  @QueryString ,
					  @HttpStatus ,
					  @CultureCode ,
					  @IsSystem,
					  @PortalAliasID ,
					  0,
					  @ModifiedByUserID,
					  getdate(),
					  @ModifiedByUserID,
					  getdate()
					)
		END
GO

/***** Fix bug 25792: update sp Dashboard_GetDbFileInfo. *****/
IF (EXISTS (SELECT name FROM sys.objects WHERE (name = N'{objectQualifier}Dashboard_GetDbFileInfo') AND (type = 'P')))
	DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDbFileInfo
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDbFileInfo
AS
	IF OBJECT_ID('sys.database_files') IS NULL
		BEGIN
		SELECT 'Total Size' AS FileType,
					'Total' AS Name,
					SUM(reserved_page_count)*8 AS Size,
					'n/a' AS FileName
				FROM sys.dm_db_partition_stats
		END
	ELSE
		BEGIN
			SELECT	CASE LOWER(RIGHT(physical_name,3))
						WHEN 'mdf' THEN 'DATA'
						WHEN 'ldf' THEN 'LOG'
						ELSE 'UNKNOWN'
					END as FileType,
						name AS Name,
						size*8 AS Size,
						physical_name AS FileName
					FROM sys.database_files
		END
GO

/***** Fix DNN-3329 - Default page size in language editor should be very large *****/
UPDATE {databaseOwner}{objectQualifier}ModuleSettings
SET SettingValue = 1000
WHERE   SettingName = 'PageSize'
        AND ModuleID IN (
        SELECT  ModuleID
        FROM    {databaseOwner}{objectQualifier}Modules M
                INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions MD ON M.ModuleDefID = MD.ModuleDefID
        WHERE   MD.DefinitionName = 'Languages' )
GO

/***** Fix DNN-26445 Optimization of GetScheduledNextTask *****/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetScheduleNextTask]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleNextTask]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleNextTask]
	@Server varchar(150)
AS
SELECT TOP 1
        S.[ScheduleID] ,
        S.[TypeFullName] ,
        S.[TimeLapse] ,
        S.[TimeLapseMeasurement] ,
        S.[RetryTimeLapse] ,
        S.[RetryTimeLapseMeasurement] ,
        S.[RetainHistoryNum] ,
        S.[AttachToEvent] ,
        S.[CatchUpEnabled] ,
        S.[Enabled] ,
        S.[ObjectDependencies] ,
        S.[Servers] ,
        S.[CreatedByUserID] ,
        S.[CreatedOnDate] ,
        S.[LastModifiedByUserID] ,
        S.[LastModifiedOnDate] ,
        S.[FriendlyName] ,
        H.[NextStart]
FROM    {databaseOwner}[{objectQualifier}Schedule] S
        CROSS APPLY ( SELECT TOP 1
                                [NextStart]
                      FROM      {databaseOwner}[{objectQualifier}ScheduleHistory]
                      WHERE     ( [ScheduleID] = S.[ScheduleID] )
                      ORDER BY  [NextStart] DESC
                    ) AS H ( [NextStart] )
WHERE   ( S.[Enabled] = 1 )
        AND ( ( S.[Servers] LIKE ( ',%' + @Server + '%,' ) )
              OR ( S.[Servers] IS NULL )
            )
ORDER BY H.[NextStart] ASC

GO

/***** Fix bug DNN-3322: update the date/datetime control to new type. *****/
UPDATE {databaseOwner}[{objectQualifier}Lists] SET Text = 'DotNetNuke.Web.UI.WebControls.PropertyEditorControls.DateEditControl, DotNetNuke.Web'
	WHERE ListName = 'DataType' AND Value = 'Date'

UPDATE {databaseOwner}[{objectQualifier}Lists] SET Text = 'DotNetNuke.Web.UI.WebControls.PropertyEditorControls.DateTimeEditControl, DotNetNuke.Web'
	WHERE ListName = 'DataType' AND Value = 'DateTime'
GO

/***** Fix bug DNN-3391: move subscription services into library. *****/
IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = '{objectQualifier}CoreMessaging_MessageRecipients' 
           AND  COLUMN_NAME = 'SendToast')
   BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients ADD
            SendToast bit NOT NULL DEFAULT ((0))
    END 
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Users') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Users
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Subscriptions_Type') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Subscriptions_Type
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Portals') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Portals
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Subscriptions_Subscriber') AND OBJECTPROPERTY(id, N'IsTable') = 1)
	DROP TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Subscriptions_Type') AND OBJECTPROPERTY(id, N'IsTable') = 1)
	DROP TABLE {databaseOwner}{objectQualifier}Subscriptions_Type
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Subscriptions_Type]
(
	[SubscriptionTypeId] [int] IDENTITY(1,1) NOT NULL,
	[SubscriptionName] [nvarchar](50) NOT NULL,
	[FriendlyName] [nvarchar](50) NULL,
	[DesktopModuleId] [int] NULL
)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Type
		WITH NOCHECK
ADD CONSTRAINT PK_{objectQualifier}Subscriptions_Type PRIMARY KEY CLUSTERED ( [SubscriptionTypeId] )
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Subscriptions_Queue]
(
	[QueueId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[SubscriptionTypeId] [int] NOT NULL,
	[ContentItemId] [int] NULL,
	[ObjectKey] [nvarchar](255) NULL,
	[Subject] [nvarchar](400) NULL,
	[Body] [nvarchar](max) NULL,
	[Summary] [nvarchar](2000) NULL,
	[CreatedOnDate] [datetime] NOT NULL
)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue
		WITH NOCHECK
ADD CONSTRAINT PK_{objectQualifier}Subscriptions_Queue PRIMARY KEY CLUSTERED ( [QueueId] )
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue
ADD CONSTRAINT FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Portals FOREIGN KEY ( [PortalId] ) REFERENCES {databaseOwner}{objectQualifier}Portals ( [PortalID] ) ON DELETE CASCADE
		ON UPDATE CASCADE
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue
ADD CONSTRAINT FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Subscriptions_Type FOREIGN KEY ( [SubscriptionTypeId] ) REFERENCES {databaseOwner}{objectQualifier}Subscriptions_Type ( [SubscriptionTypeId] ) ON DELETE CASCADE
		ON UPDATE CASCADE
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
(
	[SubscriberId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[SubscriptionTypeId] [int] NOT NULL,
	[Frequency] [int] NOT NULL,
	[ContentItemId] [int] NULL,
	[ObjectKey] [nvarchar](255) NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastSentOnDate] [datetime] NULL
)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
		WITH NOCHECK
ADD CONSTRAINT PK_{objectQualifier}Subscriptions_Subscriber PRIMARY KEY CLUSTERED ( [SubscriberId] )
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
ADD CONSTRAINT FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Portals FOREIGN KEY ( [PortalId] ) REFERENCES {databaseOwner}{objectQualifier}Portals ( [PortalID] ) ON DELETE CASCADE
		ON UPDATE CASCADE
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
ADD CONSTRAINT FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Subscriptions_Type FOREIGN KEY ( [SubscriptionTypeId] ) REFERENCES {databaseOwner}{objectQualifier}Subscriptions_Type ( [SubscriptionTypeId] ) ON DELETE CASCADE
		ON UPDATE CASCADE
GO

ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
ADD CONSTRAINT FK_{objectQualifier}Subscriptions_Subscriber_{objectQualifier}Users FOREIGN KEY ( [UserId] ) REFERENCES {databaseOwner}{objectQualifier}Users ( [UserID] ) ON DELETE CASCADE
		ON UPDATE CASCADE
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_Type_Add]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Type_Add]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Type_Add]
	@SubscriptionName NVARCHAR(50) ,
	@FriendlyName NVARCHAR(50) ,
	@DesktopModuleId INT
AS 
	INSERT  {databaseOwner}{objectQualifier}Subscriptions_Type
			( SubscriptionName ,
			  FriendlyName ,
			  DesktopModuleId
			)
	VALUES  ( @SubscriptionName ,
			  @FriendlyName ,
			  @DesktopModuleId 
			)
	SELECT  SCOPE_IDENTITY()
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_Type_GetAll]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Type_GetAll]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Type_GetAll]
AS 
	SELECT  *
	FROM    {databaseOwner}{objectQualifier}Subscriptions_Type
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_Type_Delete]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Type_Delete]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Type_Delete]
	@SubscriptionTypeId int
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}Subscriptions_Type] WHERE [SubscriptionTypeId] = @SubscriptionTypeId

	IF @@ROWCOUNT <> 0
		SELECT 0 AS [ResultStatus]
	ELSE
		SELECT -1 AS [ResultStatus]
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetSubscription]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetSubscription]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetSubscription]
	@SubscriberId int
AS 
BEGIN
	SELECT
	   [SubscriberId],
	   [UserId],
	   [PortalId],
	   [SubscriptionTypeId],
	   [Frequency],
	   [ContentItemId],
	   [ObjectKey],
	   [CreatedOnDate],
	   [LastSentOnDate]
	FROM {databaseOwner}[{objectQualifier}Subscriptions_Subscriber] WHERE [SubscriberId] = @SubscriberId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_RemoveSubscription]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_RemoveSubscription]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_RemoveSubscription]
	@SubscriberId int
AS 
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}Subscriptions_Subscriber] WHERE [SubscriberId] = @SubscriberId

	IF @@ROWCOUNT <> 0
		SELECT 0 AS [ResultStatus]
	ELSE
		SELECT -1 AS [ResultStatus]
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]
	@SubscriberId int,
	@UserId int,
	@PortalId int,
	@SubscriptionTypeId int,
	@Frequency int,
	@ContentItemId int,
	@ObjectKey nvarchar(255)
AS
BEGIN
	IF @SubscriberId IS NULL OR @SubscriberId < 0
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
			   ([UserId],
				[PortalId],
				[SubscriptionTypeId],
				[Frequency],
				[ContentItemId],
				[ObjectKey],
				[CreatedOnDate],
				[LastSentOnDate])
			VALUES
			   (@UserId,
				@PortalId,
				@SubscriptionTypeId,
				@Frequency,
				@ContentItemId,
				@ObjectKey,
				getutcdate(),
				getutcdate())

		SELECT SCOPE_IDENTITY() AS [SubscriberId]
	END
	ELSE
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
			SET
				[UserId] = @UserId,
				[PortalId] = @PortalId,
				[SubscriptionTypeId] = @SubscriptionTypeId,
				[Frequency] = @Frequency,
				[ContentItemId] = @ContentItemId,
				[ObjectKey] = @ObjectKey
			WHERE [SubscriberId] = @SubscriberId

		SELECT @SubscriberId AS [SubscriberId]
	END
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetSubscribers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetSubscribers]
	@PortalId int,
	@Frequency int,
	@QueueId int
AS
BEGIN
	-- Look up the properties of the QueueItem.
	DECLARE @SubscriptionTypeId INT
	DECLARE @ContentItemId INT
	DECLARE @ObjectKey NVARCHAR(255)

	SELECT
		@ContentItemId = ContentItemId,
		@ObjectKey = ObjectKey,
		@SubscriptionTypeId = SubscriptionTypeId
	FROM
		{databaseOwner}[{objectQualifier}Subscriptions_Queue]
	WHERE
		PortalId = @PortalId AND QueueId = @QueueId

	SELECT
	   [SubscriberId],
	   [UserId],
	   [PortalId],
	   [SubscriptionTypeId],
	   [Frequency],
	   [ContentItemId],
	   [ObjectKey],
	   [CreatedOnDate],
	   [LastSentOnDate]
	FROM
		{databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
	WHERE
		[Frequency] = @Frequency
		AND
		{databaseOwner}[{objectQualifier}Subscriptions_IsSubscriptionMatch](@PortalId, [SubscriberId], @SubscriptionTypeId, @ContentItemId, @ObjectKey) = 1
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetAllSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetAllSubscribers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetAllSubscribers]
	@PortalId int
AS
BEGIN
	SELECT
	   [SubscriberId],
	   [UserId],
	   [PortalId],
	   [SubscriptionTypeId],
	   [Frequency],
	   [ContentItemId],
	   [ObjectKey],
	   [CreatedOnDate],
	   [LastSentOnDate]
	FROM {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
	WHERE [PortalId] = @PortalId
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetLastTaskRun]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetLastTaskRun]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetLastTaskRun]
	@PortalId int
AS
BEGIN
	SELECT MAX([LastSentOnDate]) FROM {databaseOwner}[{objectQualifier}Subscriptions_Subscriber] WHERE [PortalId] = @PortalId
END
GO

--
-- Scheduled notification processing task
--

DECLARE @SubscriptionSchedulerType VARCHAR(1024)
SET @SubscriptionSchedulerType = 'DotNetNuke.Services.Subscriptions.Tasks.SubscriptionTask, DotNetNuke'

IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Schedule] WHERE [TypeFullName] = @SubscriptionSchedulerType)
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}Schedule] WHERE [TypeFullName] = @SubscriptionSchedulerType

	INSERT INTO {databaseOwner}[{objectQualifier}Schedule]
		([TypeFullName],
		 [TimeLapse],
		 [TimeLapseMeasurement],
		 [RetryTimeLapse],
		 [RetryTimeLapseMeasurement],
		 [RetainHistoryNum],
		 [AttachToEvent],
		 [CatchUpEnabled],
		 [Enabled],
		 [ObjectDependencies],
		 [Servers],
		 [FriendlyName])
	VALUES
		(@SubscriptionSchedulerType,
		 1, 'm', -1, 'm', 10, '', 0, 1, '', null, 'Subscriptions')
END
GO

--
-- Core Messaging Notification Type
--

DECLARE @NotificationTypeName VARCHAR(255)
DECLARE @NotificationTypeDescription NVARCHAR(1024)

SET @NotificationTypeName = 'DigestSubscription'
SET @NotificationTypeDescription = 'Periodic notifications for Subscriptions to particular content'

IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] WHERE [Name] = @NotificationTypeName)
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
		  ([Name],
		   [Description],
		   [TTL],
		   [DesktopModuleID],
		   [CreatedByUserID],
		   [CreatedOnDate],
		   [LastModifiedByUserID],
		   [LastModifiedOnDate])
	  VALUES
		  (@NotificationTypeName,
		   @NotificationTypeDescription,
		   NULL,
		   NULL,
		   -1,
		   getdate(),
		   -1,
		   getdate())
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetUserSubscriptions]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetUserSubscriptions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetUserSubscriptions]
	@UserId INT ,
	@PortalId INT
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
		WHERE   UserId = @UserId
				AND PortalId = @PortalId
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]
	@SchedulerInstance UNIQUEIDENTIFIER ,
	@BatchSize INT
AS 
	BEGIN
		DECLARE @NotificationSubId INT = 1
		DECLARE @MessageSubId INT = 2
		
		SET @NotificationSubId = ( SELECT   SubscriptionTypeId
								   FROM     {databaseOwner}{objectQualifier}Subscriptions_Type
								   WHERE    SubscriptionName = 'Notifications'
								 )
		SET @MessageSubId = ( SELECT    SubscriptionTypeId
							  FROM      {databaseOwner}{objectQualifier}Subscriptions_Type
							  WHERE     SubscriptionName = 'Messages'
							);
		
		WITH    CTE
				  AS ( SELECT TOP ( @BatchSize )
								CMR.*
					   FROM     {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
								INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CM ON CMR.MessageID = CM.MessageID
								LEFT JOIN {databaseOwner}{objectQualifier}Subscriptions_Subscriber SS ON CMR.UserID = SS.UserId
					   WHERE    EmailSent = 0
								AND SendToast = 0
								AND [Read] = 0
								AND Archived = 0
								AND ( ( ( SubscriptionTypeId IS NULL
										  AND NotificationTypeID > 0
										)
										OR ( SubscriptionTypeId = @NotificationSubId
											 AND Frequency = 0
										   )
									  )
									  OR ( SubscriptionTypeId = @MessageSubId
										   AND Frequency = 0
										 )
									)
								AND ( EmailSchedulerInstance IS NULL
									  OR EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000'
									)
					   ORDER BY CMR.CreatedOnDate DESC ,
								UserID
					 )
			UPDATE  CTE
			SET     EmailSchedulerInstance = @SchedulerInstance
	
		SELECT TOP ( @BatchSize )
				CMR.*
		FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
				INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CM ON CMR.MessageID = CM.MessageID
				LEFT JOIN {databaseOwner}{objectQualifier}Subscriptions_Subscriber SS ON CMR.UserID = SS.UserId
		WHERE   EmailSent = 0
				AND SendToast = 0
				AND [Read] = 0
				AND Archived = 0
				AND ( ( ( SubscriptionTypeId IS NULL
						  AND NotificationTypeID > 0
						)
						OR ( SubscriptionTypeId = @NotificationSubId
							 AND Frequency = 0
						   )
					  )
					  OR ( SubscriptionTypeId = @MessageSubId
						   AND Frequency = 0
						 )
					)
				AND EmailSchedulerInstance = @SchedulerInstance
		ORDER BY CMR.CreatedOnDate DESC ,
				UserID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_UpdateScheduleItemSetting]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_UpdateScheduleItemSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_UpdateScheduleItemSetting]
	@ScheduleID INT ,
	@Key NVARCHAR(50) ,
	@Value NVARCHAR(256)
AS 
	UPDATE  {databaseOwner}{objectQualifier}ScheduleItemSettings
	SET     SettingValue = @Value
	WHERE   ScheduleID = @ScheduleID
			AND SettingName = @Key
GO

UPDATE {databaseOwner}[{objectQualifier}Schedule]
	SET Enabled = 0 
	WHERE TypeFullName = 'DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler, DotNetNuke'
GO

--- Add Default subscription types
INSERT {databaseOwner}[{objectQualifier}Subscriptions_Type]
	(SubscriptionName, FriendlyName)
	VALUES
	('Notifications', 'Notifications')
GO
 
 INSERT {databaseOwner}[{objectQualifier}Subscriptions_Type]
	(SubscriptionName, FriendlyName)
	VALUES
	('Messages', 'Messages')
GO



/* DROP FOR GOOD */
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_IsSubscriptionMatch]', N'FN') IS NOT NULL
	DROP FUNCTION {databaseOwner}[{objectQualifier}Subscriptions_IsSubscriptionMatch]
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetSubscriptionQuery]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetSubscriptionQuery]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetAllQueueItems]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetAllQueueItems]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetInstantQueueItems]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetInstantQueueItems]
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetSubscriberQueueItems]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetSubscriberQueueItems]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_Enqueue]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Enqueue]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_Dequeue]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_Dequeue]
GO


/* DROP FOR GOOD */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetUnpublishedSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetUnpublishedSubscribers]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_SubscriptionPublished]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_SubscriptionPublished]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Subscriptions_Type') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Subscriptions_Type
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Portals') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Portals
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Subscriptions_Queue') AND OBJECTPROPERTY(id, N'IsTable') = 1)
	DROP TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue
GO

DELETE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
	WHERE SubscriptionTypeId = 1 OR SubscriptionTypeId = 2
GO

IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'ModuleId' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Subscriptions_Subscriber'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber ADD [ModuleId] INT NULL
	END
GO

IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'GroupId' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Subscriptions_Subscriber'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber ADD [GroupId] INT NULL
	END
GO

UPDATE {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
	SET GroupId = -1
GO

/* Update all ModuleId values to CI counterpart for existing subs */
UPDATE {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
	SET ModuleId = (SELECT ModuleID FROM {databaseOwner}{objectQualifier}ContentItems WHERE ContentItemID = {databaseOwner}{objectQualifier}Subscriptions_Subscriber.ContentItemId),
	ObjectKey = ''
	WHERE ContentItemId > 0
GO

/* Ensure we do not have a stacked up queue */
UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	SET EmailSentDate = GETUTCDATE(),
	EmailSent = 1
	WHERE EmailSentDate IS NULL
	AND CreatedOnDate < DATEADD(d, -1, GETUTCDATE())
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}vw_Subscriptions') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}{objectQualifier}vw_Subscriptions
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Subscriptions]
AS
	SELECT  CMR.* ,
			CM.NotificationTypeID ,
			( SELECT    ISNULL(Frequency, 1)
			  FROM      {databaseOwner}{objectQualifier}Subscriptions_Subscriber S
						INNER JOIN {databaseOwner}{objectQualifier}Subscriptions_Type T ON S.SubscriptionTypeId = T.SubscriptionTypeId
			  WHERE     UserId = CMR.UserID
						AND SubscriptionName = 'Notifications'
			) AS NotifyFrequency ,
			( SELECT    ISNULL(Frequency, 2)
			  FROM      {databaseOwner}{objectQualifier}Subscriptions_Subscriber S
						INNER JOIN {databaseOwner}{objectQualifier}Subscriptions_Type T ON S.SubscriptionTypeId = T.SubscriptionTypeId
			  WHERE     UserId = CMR.UserID
						AND SubscriptionName = 'Messages'
			) AS MessageFrequency
	FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
			INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CM ON CMR.MessageID = CM.MessageID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]
	@SubscriberId INT ,
	@UserId INT ,
	@PortalId INT ,
	@SubscriptionTypeId INT ,
	@Frequency INT ,
	@ContentItemId INT ,
	@ObjectKey NVARCHAR(255) ,
	@ModuleId INT ,
	@GroupId INT
AS 
	BEGIN
        DECLARE @SubscriberCount INT = 0   
        IF ( @SubscriberId IS NULL
             OR @SubscriberId < 1
           ) 
            BEGIN
                SET @SubscriberCount = ( SELECT ( SubscriberId )
                                         FROM   {databaseOwner}{objectQualifier}Subscriptions_Subscriber
                                         WHERE  UserId = @UserId
                                                AND PortalId = @PortalId
                                                AND SubscriptionTypeId = @SubscriptionTypeId
                                                AND ModuleId = @ModuleId
                                                AND GroupId = @GroupId
                                                AND ContentItemId = @ContentItemId
                                                AND ObjectKey = @ObjectKey
                                       )
            END
		      
        IF ( @SubscriberCount IS NULL
             OR @SubscriberCount < 1
           ) 
			BEGIN
				INSERT  INTO {databaseOwner}{objectQualifier}Subscriptions_Subscriber
						( UserId ,
						  PortalId ,
						  SubscriptionTypeId ,
						  Frequency ,
						  ContentItemId ,
						  ObjectKey ,
						  CreatedOnDate ,
						  LastSentOnDate ,
						  ModuleId ,
						  GroupId
						)
				VALUES  ( @UserId ,
						  @PortalId ,
						  @SubscriptionTypeId ,
						  @Frequency ,
						  @ContentItemId ,
						  @ObjectKey ,
						  GETUTCDATE() ,
						  GETUTCDATE() ,
						  @ModuleId ,
						  @GroupId
						)

				SELECT  SCOPE_IDENTITY() AS [SubscriberId]
			END
		ELSE 
			BEGIN
				UPDATE  {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
				SET     UserId = @UserId ,
						PortalId = @PortalId ,
						SubscriptionTypeId = @SubscriptionTypeId ,
						Frequency = @Frequency ,
						ContentItemId = @ContentItemId ,
						ObjectKey = @ObjectKey ,
						ModuleId = @ModuleId ,
						GroupId = @GroupId
				WHERE   SubscriberId = @SubscriberId

				SELECT  @SubscriberId AS [SubscriberId]
			END
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_IsSubscribed]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_IsSubscribed]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_IsSubscribed]
	@PortalId INT ,
	@UserId INT ,
	@SubscriptionTypeId INT ,
	@ContentItemId INT ,
	@ObjectKey NVARCHAR(255) ,
	@ModuleId INT ,
	@GroupId INT
AS 
	BEGIN
		IF @ContentItemId > 0 
			SELECT  *
			FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
			WHERE   UserId = @UserId
					AND PortalId = @PortalId
					AND SubscriptionTypeId = @SubscriptionTypeID
					AND ContentItemId = @ContentItemId
					AND ( @ObjectKey = '' 
						  OR ObjectKey = @ObjectKey
						)
					AND ( @GroupId < 1
						  OR GroupId = @GroupId
						)
		ELSE 
			SELECT  *
			FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
			WHERE   UserId = @UserId
					AND PortalId = @PortalId
					AND SubscriptionTypeId = @SubscriptionTypeID
					AND ContentItemId < 1
					AND ( @ObjectKey = '' 
						  OR ObjectKey = @ObjectKey
						)
					AND ModuleId = @ModuleId
					AND ( @GroupId < 1
						  OR GroupId = @GroupId
						)
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNewContentSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNewContentSubscribers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNewContentSubscribers]
	@GroupId INT ,
	@ModuleId INT ,
	@PortalId INT
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
		WHERE   ModuleId = @ModuleId
				AND GroupId = @GroupId
				AND PortalId = @PortalId
				AND ContentItemId < 1
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetContentItemSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetContentItemSubscribers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetContentItemSubscribers]
	@ContentItemId INT ,
	@PortalId INT
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
		WHERE   PortalId = @PortalId
				AND ContentItemId = @ContentItemId
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNextSubscribersForDispatch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextSubscribersForDispatch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextSubscribersForDispatch]
	@Frequency INT ,
	@SchedulerInstance UNIQUEIDENTIFIER ,
	@BatchSize INT
AS 
	BEGIN
        UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
        SET     EmailSchedulerInstance = @SchedulerInstance
        WHERE   RecipientID IN (
                SELECT TOP ( @BatchSize * 2 )
                        RecipientID
                FROM    {databaseOwner}{objectQualifier}vw_Subscriptions VS
                WHERE   EmailSent = 0
                        AND SendToast = 0
                        AND [Read] = 0
                        AND Archived = 0
                        AND ( NotificationTypeID IS NULL
                              AND ISNULL(MessageFrequency, 0) = @Frequency
                            )
                        OR ( NotificationTypeID > 0
                             AND ISNULL(NotifyFrequency, 2) = @Frequency
                           )
                        AND ( ( EmailSchedulerInstance IS NULL
                                AND EmailSentDate IS NULL
                              )
                              OR EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000'
                            )
                ORDER BY UserID ,
                        VS.CreatedOnDate DESC )

        SELECT  *
		FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
				INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CMM ON CMR.MessageID = CMM.MessageID
        WHERE   EmailSent = 0
                AND EmailSentDate IS NULL
                AND SendToast = 0
                AND [Read] = 0
                AND Archived = 0
                AND ( EmailSchedulerInstance = @SchedulerInstance )
        ORDER BY UserID ,
                CMM.CreatedOnDate DESC                      
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]
    @SchedulerInstance UNIQUEIDENTIFIER ,
    @BatchSize INT
AS 
    BEGIN		
        UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
        SET     EmailSchedulerInstance = @SchedulerInstance
        WHERE   RecipientID IN (
                SELECT TOP ( @BatchSize )
                        RecipientID 
                FROM    {databaseOwner}{objectQualifier}vw_Subscriptions VS
                WHERE   EmailSent = 0
                        AND SendToast = 0
                        AND [Read] = 0
                        AND Archived = 0
                        AND ( NotificationTypeID IS NULL
                              AND ISNULL(MessageFrequency, 0) = 0
                            )
                        OR ( NotificationTypeID > 0
                             AND ISNULL(NotifyFrequency, 2) = 0
                           )
                        AND ( ( EmailSchedulerInstance IS NULL
                                AND EmailSentDate IS NULL
                              )
                              OR EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000'
                            )
                ORDER BY VS.CreatedOnDate DESC ,
                        UserID )

        SELECT  *
        FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
                INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CMM ON CMR.MessageID = CMM.MessageID
        WHERE   EmailSent = 0
                AND EmailSentDate IS NULL
                AND SendToast = 0
                AND [Read] = 0
                AND Archived = 0
                AND ( EmailSchedulerInstance = @SchedulerInstance )
        ORDER BY UserID ,
                CMM.CreatedOnDate DESC                      
    END
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/