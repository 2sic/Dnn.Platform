
/* DROP FOR GOOD */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetUnpublishedSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetUnpublishedSubscribers]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_SubscriptionPublished]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_SubscriptionPublished]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Subscriptions_Type') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Subscriptions_Type
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Portals') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue DROP CONSTRAINT FK_{objectQualifier}Subscriptions_Queue_{objectQualifier}Portals
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Subscriptions_Queue') AND OBJECTPROPERTY(id, N'IsTable') = 1)
	DROP TABLE {databaseOwner}{objectQualifier}Subscriptions_Queue
GO

DELETE {databaseOwner}{objectQualifier}Subscriptions_Subscriber
	WHERE SubscriptionTypeId = 1 OR SubscriptionTypeId = 2
GO

IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'ModuleId' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Subscriptions_Subscriber'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber ADD [ModuleId] INT NULL
	END
GO

IF NOT EXISTS (SELECT * FROM SYS.COLUMNS WHERE NAME = N'GroupId' AND OBJECT_ID = OBJECT_ID(N'{databaseOwner}{objectQualifier}Subscriptions_Subscriber'))
	BEGIN
	   ALTER TABLE {databaseOwner}{objectQualifier}Subscriptions_Subscriber ADD [GroupId] INT NULL
	END
GO

UPDATE {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
	SET GroupId = -1
GO

/* Update all ModuleId values to CI counterpart for existing subs */
UPDATE {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
	SET ModuleId = (SELECT ModuleID FROM {databaseOwner}{objectQualifier}ContentItems WHERE ContentItemID = {databaseOwner}{objectQualifier}Subscriptions_Subscriber.ContentItemId),
	ObjectKey = ''
	WHERE ContentItemId > 0
GO

/* Ensure we do not have a stacked up queue */
UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	SET EmailSentDate = GETUTCDATE(),
	EmailSent = 1
	WHERE EmailSentDate IS NULL
	AND CreatedOnDate < DATEADD(d, -1, GETUTCDATE())
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}vw_Subscriptions') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}{objectQualifier}vw_Subscriptions
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Subscriptions]
AS
	SELECT  CMR.* ,
			CM.NotificationTypeID ,
			( SELECT    ISNULL(Frequency, 1)
			  FROM      {databaseOwner}{objectQualifier}Subscriptions_Subscriber S
						INNER JOIN {databaseOwner}{objectQualifier}Subscriptions_Type T ON S.SubscriptionTypeId = T.SubscriptionTypeId
			  WHERE     UserId = CMR.UserID
						AND SubscriptionName = 'Notifications'
			) AS NotifyFrequency ,
			( SELECT    ISNULL(Frequency, 2)
			  FROM      {databaseOwner}{objectQualifier}Subscriptions_Subscriber S
						INNER JOIN {databaseOwner}{objectQualifier}Subscriptions_Type T ON S.SubscriptionTypeId = T.SubscriptionTypeId
			  WHERE     UserId = CMR.UserID
						AND SubscriptionName = 'Messages'
			) AS MessageFrequency
	FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
			INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CM ON CMR.MessageID = CM.MessageID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_AddSubscription]
	@SubscriberId INT ,
	@UserId INT ,
	@PortalId INT ,
	@SubscriptionTypeId INT ,
	@Frequency INT ,
	@ContentItemId INT ,
	@ObjectKey NVARCHAR(255) ,
	@ModuleId INT ,
	@GroupId INT
AS 
	BEGIN
        DECLARE @SubscriberCount INT = 0   
        IF ( @SubscriberId IS NULL
             OR @SubscriberId < 1
           ) 
            BEGIN
                SET @SubscriberCount = ( SELECT ( SubscriberId )
                                         FROM   {databaseOwner}{objectQualifier}Subscriptions_Subscriber
                                         WHERE  UserId = @UserId
                                                AND PortalId = @PortalId
                                                AND SubscriptionTypeId = @SubscriptionTypeId
                                                AND ModuleId = @ModuleId
                                                AND GroupId = @GroupId
                                                AND ContentItemId = @ContentItemId
                                                AND ObjectKey = @ObjectKey
                                       )
            END
		      
        IF ( @SubscriberCount IS NULL
             OR @SubscriberCount < 1
           ) 
			BEGIN
				INSERT  INTO {databaseOwner}{objectQualifier}Subscriptions_Subscriber
						( UserId ,
						  PortalId ,
						  SubscriptionTypeId ,
						  Frequency ,
						  ContentItemId ,
						  ObjectKey ,
						  CreatedOnDate ,
						  LastSentOnDate ,
						  ModuleId ,
						  GroupId
						)
				VALUES  ( @UserId ,
						  @PortalId ,
						  @SubscriptionTypeId ,
						  @Frequency ,
						  @ContentItemId ,
						  @ObjectKey ,
						  GETUTCDATE() ,
						  GETUTCDATE() ,
						  @ModuleId ,
						  @GroupId
						)

				SELECT  SCOPE_IDENTITY() AS [SubscriberId]
			END
		ELSE 
			BEGIN
				UPDATE  {databaseOwner}[{objectQualifier}Subscriptions_Subscriber]
				SET     UserId = @UserId ,
						PortalId = @PortalId ,
						SubscriptionTypeId = @SubscriptionTypeId ,
						Frequency = @Frequency ,
						ContentItemId = @ContentItemId ,
						ObjectKey = @ObjectKey ,
						ModuleId = @ModuleId ,
						GroupId = @GroupId
				WHERE   SubscriberId = @SubscriberId

				SELECT  @SubscriberId AS [SubscriberId]
			END
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_IsSubscribed]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_IsSubscribed]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_IsSubscribed]
	@PortalId INT ,
	@UserId INT ,
	@SubscriptionTypeId INT ,
	@ContentItemId INT ,
	@ObjectKey NVARCHAR(255) ,
	@ModuleId INT ,
	@GroupId INT
AS 
	BEGIN
		IF @ContentItemId > 0 
			SELECT  *
			FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
			WHERE   UserId = @UserId
					AND PortalId = @PortalId
					AND SubscriptionTypeId = @SubscriptionTypeID
					AND ContentItemId = @ContentItemId
					AND ( @ObjectKey = '' 
						  OR ObjectKey = @ObjectKey
						)
					AND ( @GroupId < 1
						  OR GroupId = @GroupId
						)
		ELSE 
			SELECT  *
			FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
			WHERE   UserId = @UserId
					AND PortalId = @PortalId
					AND SubscriptionTypeId = @SubscriptionTypeID
					AND ContentItemId < 1
					AND ( @ObjectKey = '' 
						  OR ObjectKey = @ObjectKey
						)
					AND ModuleId = @ModuleId
					AND ( @GroupId < 1
						  OR GroupId = @GroupId
						)
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNewContentSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNewContentSubscribers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNewContentSubscribers]
	@GroupId INT ,
	@ModuleId INT ,
	@PortalId INT
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
		WHERE   ModuleId = @ModuleId
				AND GroupId = @GroupId
				AND PortalId = @PortalId
				AND ContentItemId < 1
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetContentItemSubscribers]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetContentItemSubscribers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetContentItemSubscribers]
	@ContentItemId INT ,
	@PortalId INT
AS 
	BEGIN
		SELECT  *
		FROM    {databaseOwner}{objectQualifier}Subscriptions_Subscriber
		WHERE   PortalId = @PortalId
				AND ContentItemId = @ContentItemId
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNextSubscribersForDispatch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextSubscribersForDispatch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextSubscribersForDispatch]
	@Frequency INT ,
	@SchedulerInstance UNIQUEIDENTIFIER ,
	@BatchSize INT
AS 
	BEGIN
        UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
        SET     EmailSchedulerInstance = @SchedulerInstance
        WHERE   RecipientID IN (
                SELECT TOP ( @BatchSize * 2 )
                        RecipientID
                FROM    {databaseOwner}{objectQualifier}vw_Subscriptions VS
                WHERE   EmailSent = 0
                        AND SendToast = 0
                        AND [Read] = 0
                        AND Archived = 0
                        AND ( NotificationTypeID IS NULL
                              AND ISNULL(MessageFrequency, 0) = @Frequency
                            )
                        OR ( NotificationTypeID > 0
                             AND ISNULL(NotifyFrequency, 2) = @Frequency
                           )
                        AND ( ( EmailSchedulerInstance IS NULL
                                AND EmailSentDate IS NULL
                              )
                              OR EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000'
                            )
                ORDER BY UserID ,
                        VS.CreatedOnDate DESC )

        SELECT  *
		FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
				INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CMM ON CMR.MessageID = CMM.MessageID
        WHERE   EmailSent = 0
                AND EmailSentDate IS NULL
                AND SendToast = 0
                AND [Read] = 0
                AND Archived = 0
                AND ( EmailSchedulerInstance = @SchedulerInstance )
        ORDER BY UserID ,
                CMM.CreatedOnDate DESC                      
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Subscriptions_GetNextMessagesForDispatch]
    @SchedulerInstance UNIQUEIDENTIFIER ,
    @BatchSize INT
AS 
    BEGIN		
        UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
        SET     EmailSchedulerInstance = @SchedulerInstance
        WHERE   RecipientID IN (
                SELECT TOP ( @BatchSize )
                        RecipientID 
                FROM    {databaseOwner}{objectQualifier}vw_Subscriptions VS
                WHERE   EmailSent = 0
                        AND SendToast = 0
                        AND [Read] = 0
                        AND Archived = 0
                        AND ( NotificationTypeID IS NULL
                              AND ISNULL(MessageFrequency, 0) = 0
                            )
                        OR ( NotificationTypeID > 0
                             AND ISNULL(NotifyFrequency, 2) = 0
                           )
                        AND ( ( EmailSchedulerInstance IS NULL
                                AND EmailSentDate IS NULL
                              )
                              OR EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000'
                            )
                ORDER BY VS.CreatedOnDate DESC ,
                        UserID )

        SELECT  *
        FROM    {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients CMR
                INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages CMM ON CMR.MessageID = CMM.MessageID
        WHERE   EmailSent = 0
                AND EmailSentDate IS NULL
                AND SendToast = 0
                AND [Read] = 0
                AND Archived = 0
                AND ( EmailSchedulerInstance = @SchedulerInstance )
        ORDER BY UserID ,
                CMM.CreatedOnDate DESC                      
    END
GO
